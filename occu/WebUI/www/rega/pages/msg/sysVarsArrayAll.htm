<script type="text/javascript">
<%
  if( system.IsVar("iCurrentIndex") )
  {
    integer iCurrentIdx = system.GetVar("iCurrentIndex").ToInteger();
    object oEnum = dom.GetObject(ID_SYSTEM_VARIABLES);
    integer iRetCount = 0;
    string s;
    foreach (s,oEnum.EnumIDs(iCurrentIdx,5,&iRetCount))
    {
      object oSysVar = dom.GetObject( s );
      if( oSysVar )
      {
        object oChannel = dom.GetObject( oSysVar.Channel() );
        if( !oChannel )
        {
          integer iVST = oSysVar.ValueSubType();
          Write("var tmp = new Object();");
          Write("tmp['id'] = '"#oSysVar.ID()#"';");
          Write("tmp['trid'] = 'svd"#oSysVar.ID()#"';");
          Write("tmp['name'] = '"#oSysVar.Name()#"';");

          Write("tmp['desc'] = '"#oSysVar.DPInfo()#"';");

          ! "Set once when the system is starting for the first time by hm_autoconf - see create_sysvars
          ! The text of the description is then fix either german or english. Therefore we have to translate the value here
          Write("if(tmp['desc'] == 'Alarmmeldung Alarmzone 1' || tmp['desc'] == 'Alarm message alarm zone 1' ) {tmp['desc'] = translateKey('sysVarAlarmZone1Msg');}");

          if (iVST == istPresent)
          {
            Write("tmp['type'] = 'present';");
            Write("tmp['typenames'] = translateKey('lblPresence');");
            Write("tmp['values'] = '"#oSysVar.Value()#"';");
          }
          if (iVST == istAlarm)
          {

            ! Set by hm_autoconf - create_sysvars
            ! Learn more above at the value tmp['desc']
            Write("var vName0 = '"#oSysVar.ValueName0()#"';");
            Write("var vName1 = '"#oSysVar.ValueName1()#"';");
            Write("if(vName0 == 'nicht ausgelöst' || vName0 == 'not triggered') {vName0 = translateKey('lblNotTriggered');}");
            Write("if(vName1 == 'ausgelöst' || vName1 == 'triggered') {vName1 = translateKey('lblTriggered');}");

            Write("tmp['type'] = 'alarm';");
            Write("tmp['typenames'] = translateKey('lblAlarm');");
            !Write("tmp['values'] = '"#oSysVar.ValueName0()#" / "#oSysVar.ValueName1()#"';");
            Write("tmp['values'] = vName0 + ' / ' + vName1;");
          }
          if (iVST == istGeneric)
          {
            Write("tmp['type'] = 'generic';");
            Write("tmp['typenames'] = translateKey('lblNumber');");
            Write("tmp['values'] = translateString('${lblFrom} "#oSysVar.ValueMin()#" ${lblTo} "#oSysVar.ValueMax()#"');");
          }
          if (iVST == istEnum)
          { 
            Write("tmp['type'] = 'enum';");
            Write("tmp['typenames'] = translateKey('lblValueList');");
            Write("tmp['values'] = '"#oSysVar.ValueList()#"';");
          }
          if (iVST == istBool)
          { 
            Write("tmp['type'] = 'boolean';");
            Write("tmp['typenames'] = translateKey('lblLogicValue');");
            Write("tmp['values'] = '"#oSysVar.ValueName0()#" / "#oSysVar.ValueName1()#"';");
          }
          if (iVST == istChar8859)
          {
            Write("tmp['type'] = 'string';");
            Write("tmp['typenames'] = translateKey('lblString');");
            Write("tmp['values'] = '';");
          }
          Write("tmp['unit'] = '"#oSysVar.ValueUnit()#"';");
          Write("arSysVars[arSysVars.length] = tmp;");
        }
      }
    }
  }
%>
</script>
<%
  if( system.IsVar("iRetCount") )
  {
    if( system.GetVar("iRetCount").ToInteger() < 5 )
    {
      Write( "false" );
    }
    else
    {
      Write( "true" );
    }
  }
%>
