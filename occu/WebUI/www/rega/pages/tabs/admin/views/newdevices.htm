<script type="text/javascript">
  <%
  system.SetSessionVar("sessionTAB", "newdevices");
  object
  oUser = dom.GetObject(system.GetSessionVar("sessionUserID"));
  if (oUser && (system.GetSessionVar("sessionCTV") == "true")) {
    oUser.UserTempViewIDs().RemoveAll();

    Write('iseClearLastSort();');

    object
    oTmpArray = dom.GetObject(ID_DEVICES);
    oTmpArray.SortByName();
    if (oTmpArray) {
      string
      sTmp;
      foreach(sTmp, oTmpArray.EnumIDs())
      {
        object
        oTmp = dom.GetObject(sTmp);
        if (oTmp) {
          if ((!oTmp.ReadyConfig()) && (oTmp.Name() != 'Gateway') && (oTmp.Interface() != ID_ERROR)) {
            oUser.UserTempViewIDs().Add(oTmp.ID());
          }
        }
      }
    }
  }
  %>

  setPath("<span onclick='WebUI.enter(SystemConfigPage);'>" + translateKey('menuSettingsPage') + "</span> &gt;" + translateKey('submenuDeviceInbox'));
  arSubIds = new Array();
  arImgIds = new Array(); // +/-
  arDevices = new Array(); // Objects der Geräte
  arDevPosis = new Array(); // Position der Geräte-Tabellenreihe
  var deviceData = null;
  bEIP = false; // Expand In Progress
  bNecc = false; // to reload page in neccecary

  <%
  integer
  iNewCount = 0;
  object
  obj = dom.GetObject(ID_DEVICES);
  if (obj) {
    string
    tmp = "";
    foreach(tmp, obj.EnumEnabledIDs())
    {
      object
      elem = dom.GetObject(tmp);
      if (elem && (elem.ReadyConfig() == false) && (elem.Name() != 'Gateway')) {
        iNewCount = iNewCount + 1;
      }
    }
  }
  %>

  var iNewDevCount = 0;
</script>

<div id="dummy" class="CLASS04300"></div>
<div class="CLASS04301">
<div id="noNewDevs" class="CLASS04302" style="display:none;">${noDeviceInPostBox}</div>
<table id="newDevTbl" class="tblList CLASS04303" cellpadding="0" cellspacing="0"
       style="display:none; width:97%; margin:1%;">
<colgroup>
  <col width="2%"/>
  <!-- Plus/Minus Device-->
  <col width="2%"/>
  <!-- Plus/Minus Group -->
  <col width="2%"/>
  <!-- Leere Zelle vor GroupMember -->
  <col width="1%"/>
  <col width="3%"/>
  <col width="7%"/>
  <col width="7%"/>
  <col width="9%"/>
  <col width="7%"/>
  <col width="7%"/>
  <col width="7%"/>
  <col width="7%"/>
  <col width="7%"/>
  <col width="15%"/>
  <col width="7%"/>
</colgroup>
<tbody id="tblNewDevices">
<tr id="tblNewDevicesHeader">
  <th id="tblListFold"></th>

  <th class="Sort CLASS04304 border1px" onclick="NewDevSort('type')" colspan='3'><b>${thTypeDescriptor}</b></th>
  <th class="Sort CLASS04304 border1px"><b>${thPicture}</b></th>
  <th class="Sort CLASS04304 border1px" onclick="NewDevSort('desc')"><b>${thDescriptor}</b></th>
  <th class="Sort CLASS04304 border1px" onclick="NewDevSort('sn')"><b>${thSerialNumber}</b></th>
  <th class="Sort CLASS04304 border1px" onclick="NewDevSort('iface')"><b>${thInterfaceCategory}</b></th>
  <th class="Sort CLASS04304 border1px" onclick="NewDevSort('trans')"><b>${thTransmitMode}</b></th>
  <th class="Sort CLASS04304 border1px" onclick="NewDevSort('name')"><b>${thName}</b></th>
  <th class="Sort CLASS04304 border1px" onclick="NewDevSort('func')"><b>${thFunc}</b></th>
  <th class="Sort CLASS04304 border1px" onclick="NewDevSort('room')"><b>${thRoom}</b></th>
  <th class="Sort CLASS04304 border1px"><b>${thFunctionTest}</b></th>
  <th class="Sort CLASS04304 border1px"><b>${thAction}</b></th>
  <th class="Sort CLASS04304 border1px"><b>${thReady}</b></th>
</tr>

<script type="text/javascript">
translatePage("tblNewDevicesHeader");
iNewDevCount =
<%
Write(iNewCount);
%>
;
if (iNewDevCount == 0) {
  $("noNewDevs").show();
}
else {
  $("newDevTbl").show();
}

<%
string devId = "";
foreach(devId, oUser.UserTempViewIDs().EnumEnabledIDs())
{
  object dev = dom.GetObject(devId);
  if (dev && (dev.ReadyConfig() == false) && (dev.Name() != 'Gateway') && (dev.Interface() != ID_ERROR)) {
    Write("deviceData = new Object();");
    Write("deviceData['id'] = "#dev.ID()#";");
    Write("deviceData['name'] = '"#dev.Name()#"';");
    Write("deviceData['type'] = '"#dev.Label()#"';");
    Write("deviceData['pic'] = '';");
    Write("deviceData['desc'] = DEV_getDescription('"#dev.Label()#"');");
    Write("deviceData['sn'] = '"#dev.Address()#"';");
    Write("var chnTypes = new Array();");

    string
    chnId;
    foreach(chnId, dev.Channels())
    {
      object
      chn = dom.GetObject(chnId);
      Write("chnTypes.push('"#chn.HssType()#"');"
    )
    }
    Write("deviceData['chnTypes'] = chnTypes;");

    string chnTmp = "";
    string roomIDs = "";
    string funcIDs = "";
    boolean bOneProto = false;
    integer STD_FLAG = 1;
    integer SAFE_FLAG = 2;
    integer bitTrans = 0;
    foreach(chnTmp, dev.EnumChannelGroups(true))
    {
      object
      chn = dom.GetObject(chnTmp);
      if (chn && (chn.Internal() == false)) {
        if (chn.ChnArchive()) {
          bOneProto = true;
        }
        if (chn.ChnAESActive()) {
          bitTrans = bitTrans | SAFE_FLAG;
        }
        else {
          bitTrans = bitTrans | STD_FLAG;
        }
        string
        tmp = "";
        foreach(tmp, chn.ChnRoom())
        {
          boolean
          bFound = false;
          string
          tmpR = "";
          foreach(tmpR, roomIDs)
          {
            if (tmpR == tmp) {
              bFound = true;
            }
          }
          if (!bFound) {
            roomIDs = roomIDs # tmp # "\t";
          }
        }

        string
        tmp = "";
        foreach(tmp, chn.ChnFunction())
        {
          boolean
          bFound = false;
          string
          tmpF = "";
          foreach(tmpF, funcIDs)
          {
            if (tmpF == tmp) {
              bFound = true;
            }
          }
          if (!bFound) {
            funcIDs = funcIDs # tmp # "\t";
          }
        }
      }
    }
    foreach(chnTmp, dev.EnumChannelGroups(false))
    {
      object
      chn = dom.GetObject(chnTmp);
      if (chn && (chn.Internal() == false)) {
        if (chn.ChnAESActive()) {
          bitTrans = bitTrans | SAFE_FLAG;
        }
        else {
          bitTrans = bitTrans | STD_FLAG;
        }
        if (chn.ChnArchive()) {
          bOneProto = true;
        }
        string
        tmp = "";
        foreach(tmp, chn.ChnRoom())
        {
          boolean
          bFound = false;
          string
          tmpR = "";
          foreach(tmpR, roomIDs)
          {
            if (tmpR == tmp) {
              bFound = true;
            }
          }
          if (!bFound) {
            roomIDs = roomIDs # tmp # "\t";
          }
        }

        string
        tmp = "";
        foreach(tmp, chn.ChnFunction())
        {
          boolean
          bFound = false;
          string
          tmpF = "";
          foreach(tmpF, funcIDs)
          {
            if (tmpF == tmp) {
              bFound = true;
            }
          }
          if (!bFound) {
            funcIDs = funcIDs # tmp # "\t";
          }
        }
      }
    }
    string funcNames = "";
    string roomNames = "";
    string tmp = "";
    foreach(tmp, roomIDs)
    {
      object obj = dom.GetObject(tmp);
      roomNames = roomNames # obj.Name() # ";";
    }
    string tmp = "";
    foreach(tmp, funcIDs)
    {
      object obj = dom.GetObject(tmp);
      funcNames = funcNames # obj.Name() #  ";";
    }


    string sTrans;

    if (bitTrans & STD_FLAG) {
      sTrans = sTrans # "${lblStandard} ";
    }

    if (bitTrans & SAFE_FLAG) {
      sTrans = sTrans # "${lblSecured}";
    }
    Write("deviceData['trans'] = '"#sTrans#"';");

    string sIface = "";
    integer iface = dev.Interface();
    if (iface != ID_ERROR) {
      sIface = dom.GetObject(iface).Name();
    }
    Write("deviceData['iface'] = '"#sIface#"';");
    Write("deviceData['func'] = '"#funcNames#"';");
    Write("deviceData['room'] = '"#roomNames#"';");
    Write("deviceData['proto'] = "#bOneProto#";");
    boolean bFound3 = false;
    string s3;
    foreach(s3, dev.Channels().EnumEnabledIDs())
    {
      object
      oChTmp = dom.GetObject(s3);
      if (oChTmp) {
        object
        oDpTmp = dom.GetObject(oChTmp.DefaultDPWrite());
        if (oDpTmp) {
          if ((!oDpTmp.IsTypeOf(OT_VARDP)) && (!oDpTmp.IsTypeOf(OT_ALARMDP))) {
            bFound3 = true;
          }
        }
      }
    }
    if (bFound3) {
      boolean bHasFullAccess = (dev.UserAccessRights(iulOtherThanAdmin) == iarFullAccess);
      if (bHasFullAccess) {
        Write("deviceData['handle'] = 'YES';");
      }
      else {
        Write("deviceData['handle'] = 'NO';");
      }
    }
    else {
      Write("deviceData['handle'] = 'READONLY';");
    }
    Write("deviceData['vis'] = "#(dev.Visible())#";");
    Write('conInfo( "Device '#(dev.Name())#' : '#(dev.Visible())#'" );');
    Write("deviceData['readyconfig'] = "#(dev.ReadyConfigChns())#";");
    Write("deviceData['loaded'] = false;");

    boolean bExistComTestDP = false;
    string sdev;
    foreach(sdev, dev.Channels().EnumIDs())
    {
      object
      oCHTmpECT = dom.GetObject(sdev);
      if (oCHTmpECT) {
        if (oCHTmpECT.ExistComTestDP()) {
          bExistComTestDP = true;
        }
      }
    }
    if (bExistComTestDP) {
      Write('deviceData["comtestdp"] = true;');
    }
    else {
      Write('deviceData["comtestdp"] = false;');
    }


    boolean bFound = false;
    string s;
    foreach(s, dom.TestRunningIDs().EnumIDs())
    {
      if (dev.Channels().Get(s)) {
        bFound = true;
      }
    }

    if (bFound) {
      Write("deviceData['testrunning'] = true;");
    }
    else {
      Write("deviceData['testrunning'] = false;");
    }

    string sTimestamp = dev.LastTestCompletedTime();
    Call("/esp/TimeStamp.fn::TimeStampToString3()");
    Write("deviceData['testtime'] = '"#sTimestamp#"';");

    Write("arDevices[arDevices.length] = deviceData;");
  }
}
%>
var arDevInInbox = [];
for (var i = 0; i < arDevices.length; i++) {
  arDevInInbox.push({"serialNumber": arDevices[i]['sn'], "regaID": arDevices[i]['id']});

  var tr = Builder.node('tr', {id: "tr" + arDevices[i]['id']});
  //var td = Builder.node('td');
  var td = Builder.node('td', {className: 'DeviceListCell_Invisible'});
  arImgIds[arImgIds.length] = "img" + arDevices[i]['id'];
  var img = Builder.node('img', {src: "/ise/img/plus.png", id: "img" + arDevices[i]['id'], alt: "plus", onclick: "expandDevice(" + arDevices[i]['id'] + "," + i + ")"});
  td.appendChild(img);
  tr.appendChild(td);
  td = Builder.node('td', {className: 'GrayBkg border1px', colSpan: 3}, strCut(arDevices[i]['type'], true));
  tr.appendChild(td);
  td = Builder.node('td', {className: 'WhiteBkgPic CLASS04314 border1px'}, [
    Builder.node('div', {id: 'picDiv' + arDevices[i]['id'], className: "CLASS04305",
      onmouseover: "picDivShow(jg_250, '" + arDevices[i]['type'] + "', 250, '-1', this);", onmouseout: "picDivHide(jg_250);"})
  ]);
  tr.appendChild(td);
  td = Builder.node('td', {className: 'GrayBkg border1px'}, arDevices[i]['desc'] );
  td.innerHTML = translateKey(arDevices[i]['desc']);
  tr.appendChild(td);
  td = Builder.node('td', {className: 'GrayBkg border1px'}, strCut(arDevices[i]['sn']));
  tr.appendChild(td);
  td = Builder.node('td', {className: 'GrayBkg border1px'}, arDevices[i]['iface']);
  tr.appendChild(td);
  td = Builder.node('td', {id: "transParent" + arDevices[i]['id'], className: 'GrayBkg border1px'}, spaceCut(arDevices[i]['trans']));
  tr.appendChild(td);

  if (NAV_IE) {
    td = Builder.node('td', {className: 'WhiteBkg border1px'},
      [Builder.node('div', {id: 'tdn' + arDevices[i]['id'], className: "CLASS04306", onclick: 'textEdit(id, ' + arDevices[i]['id'] + ', false, 0, CALL_STRCUT)'}, strCut(arDevices[i]['name'], true)) ]);
    tr.appendChild(td);
  }
  else {
    td = Builder.node('td', {className: 'WhiteBkg CLASS04307 border1px', id: 'tdn' + arDevices[i]['id'], onclick: 'textEdit(id, ' + arDevices[i]['id'] + ', false, 0, CALL_STRCUT)'}, strCut(arDevices[i]['name'], true));
    tr.appendChild(td);
  }
  td = Builder.node('td', {id: "funcs" + arDevices[i]['id'], className: 'GrayBkg border1px'}, semCut(arDevices[i]['func']));
  tr.appendChild(td);
  td = Builder.node('td', {id: "rooms" + arDevices[i]['id'], className: 'GrayBkg border1px'}, semCut(arDevices[i]['room']));
  tr.appendChild(td);
  td = Builder.node('td', {className: 'WhiteBkg border1px'});

  if (arDevices[i]['type'].match(/Team/g) == null ) {
    writeTestField(td, arDevices[i]['id'].toString(), arDevices[i]['testtime'], arDevices[i]['comtestdp'], arDevices[i]['testrunning']);
  }

  tr.appendChild(td);
  td = Builder.node('td', {className: 'WhiteBkg border1px'}, '');
  writeDeviceAction(td, true, true, true, arDevices[i]);
  tr.appendChild(td);

  td = Builder.node('td', {className: 'WhiteBkg border1px'}, '');
  writeReadyField(td, arDevices[i]);
  tr.appendChild(td);

  $("tblNewDevices").appendChild(tr);
  // draw pic
  var jg_0 = new jsGraphics('picDiv' + arDevices[i]['id']);
  InitGD(jg_0, 50);
  Draw(jg_0, arDevices[i]['type'], 50, '-1');

  arDevPosis[arDevPosis.length] = i + 2;
}


Groups.createGroupButtons(arDevInInbox);

if (NAV_IE) {
  var tr = Builder.node('tr');
  Element.addClassName(tr, "CLASS04309");
  for (var i = 0; i < 15; i++) {
    var td = Builder.node('td', {}, ".");
    Element.addClassName(td, "CLASS04310");
    tr.appendChild(td);
  }
  $("tblNewDevices").appendChild(tr);
}
</script>
</tbody>
</table>
<br/><br/><br/><br/><br/><br/><br/>
<br/><br/><br/><br/><br/><br/><br/>
</div>
<div class="RoomFuncChooser CLASS04311" id="roomOverlay" style="display:none;"></div>
<div class="RoomFuncChooser CLASS04311" id="funcOverlay" style="display:none;"></div>
<script type="text/javascript">
iseRooms.buildRoomOverlay();
iseFunctions.buildFuncOverlay();
/* * * * * * * Expand / Collapse  * * * * * * * * * * * * * * * * * * * */
var iDevicesExpanded = 0;
expandDevice = function (id, arIdx, bAutoExpandGroups) {
  // Ausklappen
  if ($("img" + id).alt == "plus") {
    if (!bEIP) {
      arDevices[arIdx]['expanded'] = true;
      $("img" + id).src = "/ise/img/minus.png";
      $("img" + id).alt = "minus";
      Cursor.set(Cursor.WAIT);
      if (arDevices[arIdx]['loaded']) {
        for (var i = 0; i < arDevices[arIdx]['chns'].length; i++) {
          show(arDevices[arIdx]['chns'][i]['trid']);
          // show picture for row
          show('picDiv' + arDevices[arIdx]['chns'][i]['id']);
        }
        for (var i = 0; i < arDevices[arIdx]['chnsgr'].length; i++) {
          show(arDevices[arIdx]['chnsgr'][i]['trid']);
          // show picture for row
          show('picDiv' + arDevices[arIdx]['chnsgr'][i][0]['id'] + arDevices[arIdx]['chnsgr'][i][1]['id']);
          if (bAutoExpandGroups) {
            expandGroup(arDevices[arIdx]['id'],
              arDevices[arIdx]['chnsgr'][i][0]['id'],
              arDevices[arIdx]['chnsgr'][i][1]['id']);
          }
        }
        iDevicesExpanded++;
        Cursor.set(Cursor.NORMAL);
      }
      else {
        var pb = "";
        pb += "integer devid = " + id + ";";
        pb += "integer arIdx = " + arIdx + ";";
        pb += "integer insIdx = " + arDevPosis[arIdx] + ";";
        if (bAutoExpandGroups)
          pb += "boolean bAutoExpGr = true;";
        else
          pb += "boolean bAutoExpGr = false;";
        bEIP = true;
        var opts = {
          evalScripts: true,
          postBody: pb,
          asynchronous: false,
          onComplete: function () {
            arDevices[arIdx]['loaded'] = true;
          }
        };
        new Ajax.Updater("dummy", "/pages/tabs/admin/views/newDeviceLoader.htm?sid=" + SessionId, opts);
        iDevicesExpanded++;
      }
    }
    else {
      var s = "false";
      if (bAutoExpandGroups)
        s = "true";
      window.setTimeout("expandDevice(" + id + "," + arIdx + ", " + s + ")", 500);
    }
  }
  // Einklappen
  else {
    $("img" + id).src = "/ise/img/plus.png";
    $("img" + id).alt = "plus";
    arDevices[arIdx]['expanded'] = false;
    for (var i = 0; i < arDevices[arIdx]['chns'].length; i++) {
      hide("" + arDevices[arIdx]['id'] + arDevices[arIdx]['chns'][i]['id']);
      // arDevices[arIdx]['chns'][i]['id'] -> id des Channels
      // hide picture for row
      hide('picDiv' + arDevices[arIdx]['chns'][i]['id']);
    }
    for (var i = 0; i < arDevices[arIdx]['chnsgr'].length; i++) {
      // arDevices[arIdx]['chnsgr'][i][0]['id'] -> id des Channels in der channel group 0
      // hide picture for row
      hide('picDiv' + arDevices[arIdx]['chnsgr'][i][0]['id'] + arDevices[arIdx]['chnsgr'][i][1]['id']);
      collapseGroup(arDevices[arIdx]['id'], arDevices[arIdx]['chnsgr'][i][0]['id'], arDevices[arIdx]['chnsgr'][i][1]['id'], false);
    }
    iDevicesExpanded--;
  }
  refreshFooterButton();
};

expandGroup = function (devId, id1, id2) {
  if ($("img" + id1 + id2).alt == "plus") {
    $("img" + id1 + id2).src = "/ise/img/minus.png";
    $("img" + id1 + id2).alt = "minus";
    show("" + devId + id1 + id2 + "1");
    show("" + devId + id1 + id2 + "2");
    // show channel picture pictures
    show('picDiv' + id1);
    show('picDiv' + id2);
  }
  // Einklappen
  else {
    collapseGroup(devId, id1, id2, true);
  }
};

collapseGroup = function (devId, id1, id2, subsOnly) {
  if ($("img" + id1 + id2)) {
    $("img" + id1 + id2).src = "/ise/img/plus.png";
    $("img" + id1 + id2).alt = "plus";
  }
  if (!subsOnly)
    hide("" + devId + id1 + id2);
  hide("" + devId + id1 + id2 + "1");
  hide("" + devId + id1 + id2 + "2");
  // hide channel pictures
  hide('picDiv' + id1);
  hide('picDiv' + id2);
};

collapseAll = function () {
  var pb = "integer iNewOnly = 0;";
  if (iDevicesExpanded == 0) {
    for (var i = 0; i < arDevices.length; i++) {
      expandDevice(arDevices[i]['id'], i, true);
    }
  }
  else {
    for (var i = 0; i < arSubIds.length; i++) {
      $(arSubIds[i]).hide();
    }
    for (var i = 0; i < arImgIds.length; i++) {
      $(arImgIds[i]).src = "/ise/img/plus.png";
      $(arImgIds[i]).alt = "plus";
    }
    for (var i = 0; i < arDevices.length; i++) {
      arDevices[i]['expanded'] = false;
      if (arDevices[i]['chns']) {
        for (var x = 0; x < arDevices[i]['chns'].length; x++) {
          hide('picDiv' + arDevices[i]['chns'][x]['id']);
        }
      }
      if (arDevices[i]['chnsgr']) {
        for (var x = 0; x < arDevices[i]['chnsgr'].length; x++) {
          collapseGroup(arDevices[i]['id'], arDevices[i]['chnsgr'][x][0]['id'], arDevices[i]['chnsgr'][x][1]['id'], false);
          hide('picDiv' + arDevices[i]['chnsgr'][x][0]['id'] + arDevices[i]['chnsgr'][x][1]['id']);
        }
      }
    }
    iDevicesExpanded = 0;
  }
  refreshFooterButton();
};

editRooms = function () {
  dlgPopup = new iseMessageBox(ID_ROOMS);
  PopupClose = function () {
    dlgPopup.hide();
    iseRooms.buildRoomOverlay();
  };
  dlgPopup.ShowPopup();
};
editFuncs = function () {
  dlgPopup = new iseMessageBox(ID_FUNCTIONS);
  PopupClose = function () {
    dlgPopup.hide();
    iseFunctions.buildFuncOverlay();
  };
  dlgPopup.ShowPopup();
};

refreshFooterButton = function () {
  if (iDevicesExpanded == 0) {
    $("btnStructure").innerHTML = translateKey('footerBtnOpenTree'); //"Baumstruktur<br />&ouml;ffnen";
  }
  else {
    $("btnStructure").innerHTML = translateKey('footerBtnCloseTree'); //  "Baumstruktur schließen";
  }
};

var s = "";

s += "<table cellspacing='8'>";
s += "<tr>";
s += "<td align='center' valign='middle'><div class='FooterButton' onclick='WebUI.goBack()'>" + translateKey('footerBtnPageBack') + "</div></td>";
s += "<td align='center' valign='middle'><div id='btnStructure' class='FooterButton CLASS04312' onclick='collapseAll()'>" + translateKey('footerBtnOpenTree') + "</div></td>";
s += "</tr>";
s += "</table>";

setFooter(s);

NewDevSort = function (colName) {
  updateContent("/pages/tabs/admin/views/newdevices.htm", null, "system.SetSessionVar('sessionLS', '" + colName + "');");
};

GetChannelType = function (channel) {
  return channel.channelType;
};

CreateSysVarEnergyCounter = function (name, type) {
  switch (type) {
    case "float" :
      var minVal = 0,
        maxVal = (1.7 * Math.pow(10, 308)) - 1; // Double in C++
      return homematic("SysVar.createFloat", {"name": name, "minValue": minVal, "maxValue": maxVal, "internal": 1});
    case "boolean":
      return homematic("SysVar.createBool", {"name": name, "init_val": false, "internal": 1}); // for testing internal 0
  }
};

//Standard EnergyCounter
CreateSysVarEnergyCounterScript = function(chn) {

  var sysVarIds = getSysVarEnergyCounterIds(chn);
  var sysVarId = sysVarIds.counterId,
    sysVarOldValId = sysVarIds.tmpCounterId;

  var updateScript =
  "object chn = dom.GetObject('"+chn.id+"');\n" +
  "object oBoot = chn.DPByControl('POWERMETER.BOOT');\n" +
  "object oEnergyCounter = chn.DPByControl('POWERMETER.ENERGY_COUNTER');\n" +
  "object oSysVarEnergyCounter = dom.GetObject('"+sysVarId+"');\n" +
  "object oSysVarEnergyCounterOldVal = dom.GetObject('"+sysVarOldValId+"');\n" +

  "boolean bootFlag = oBoot.Value();\n" +
  "real devVal = oEnergyCounter.Value();\n" +
  "real devValMax = oEnergyCounter.ValueMax();\n" +
  "real oldDevVal = oSysVarEnergyCounterOldVal.Value();\n" +
  "real diffVal = 0.0;\n" +
  "real sysVarVal = oSysVarEnergyCounter.Value();\n" +
  "integer tmp_devVal = (devVal.ToString().ToFloat() * 100000).ToInteger();\n" +
  "integer tmp_oldDevVal = (oldDevVal.ToString().ToFloat() * 100000).ToInteger();\n" +


  "if (oldDevVal <= 0) {\n" +
    "oSysVarEnergyCounterOldVal.State(devVal);\n" +
    "oSysVarEnergyCounter.State(devVal);\n" +
  "} else {\n" +
    "if ( ( bootFlag == true ) && ( tmp_devVal < tmp_oldDevVal ) ) {\n" +
      "diffVal = devVal;\n" +
    "} else {\n" +
      "if (tmp_devVal >= tmp_oldDevVal) {\n" +
        "diffVal = devVal - oldDevVal;\n" +
      "}\n"+

      "if ((tmp_devVal > 0) && (tmp_devVal < tmp_oldDevVal)) {\n" +
        "diffVal = (devVal + devValMax) - oldDevVal;\n" +
      "}\n" +
    "}\n"+
    "if (devVal > 0) {\n" +
      "oSysVarEnergyCounterOldVal.State(devVal);\n" +
    "}\n" +
    "oSysVarEnergyCounter.State(sysVarVal + diffVal);\n" +
  "}\n";

  var script =
  "var sysVarId = '"+sysVarId+"';\n" +
  "var channel = dom.GetObject('"+chn.id+"');\n" +
  "var channelId = channel.ID();\n" +
  "var paramId = channel.DPByControl('POWERMETER.ENERGY_COUNTER').ID();\n"+
  "var _script = \""+updateScript+"\";\n" +

  "var DP_VALUE_CHECK_UPDATE = 13;"+

  "var programs = dom.GetObject(ID_PROGRAMS);"+
  "var program  = dom.CreateObject(OT_PROGRAM);"+
  "program.Name('prgEnergyCounter_"+ chn.id +"_"+chn.address+"');"+
  "program.Internal(true);"+
  "programs.Add(program.ID());"+


  "var rule = program.Rule();"+
  "rule.RuleOperatorType(OPERATOR_NONE);"+

  "var condition = rule.RuleAddCondition();"+
  "condition.CndOperatorType(OPERATOR_NONE);"+

  "var singleCondition = condition.CndAddSingle();"+
  "singleCondition.OperatorType(OPERATOR_NONE);"+
  "singleCondition.ConditionType(9);"+
  "singleCondition.ConditionType2(DP_VALUE_CHECK_UPDATE);"+
  "singleCondition.LeftValType(ivtObjectId);"+
  "singleCondition.LeftVal(paramId);"+
  "singleCondition.RightVal1ValType(ivtFloat);"+
  "singleCondition.RightVal1(0.0);"+
  "singleCondition.RightVal2ValType(ivtFloat);"+
  "singleCondition.RightVal2(0.0);"+

  "singleCondition.ConditionChannel(channelId);"+

  "var destination = rule.RuleDestination();"+
  "var action = destination.DestAddSingle();"+
  "action.DestinationParam(ivtString);"+
  "action.DestinationValueType(ivtString);"+
  "action.DestinationValue(_script);"+

  "program.Active(true);"+
  "dom.RTUpdate(0);";

  homematic("ReGa.runScript", {"script": script});
};

// Current/Gas EnergyCounter
CreateSysVarEnergyCounterScriptIGL = function (chn, channelType, sensorType) {

  var sysVarIds = (sensorType == "CURRENT") ? getSysVarEnergyCounterIds(chn) : getSysVarEnergyCounterGasIds(chn);
  var sysVarId = sysVarIds.counterId,
    sysVarOldValId = sysVarIds.tmpCounterId;

  var counter = (sensorType == "CURRENT") ? "ENERGY_COUNTER" : "GAS_ENERGY_COUNTER";
  var prgNameExtension = (counter == "ENERGY_COUNTER") ? "" : "GAS";

  var updateScript =
    "object chn = dom.GetObject('" + chn.id + "');\n" +
    "object oBoot = chn.DPByControl('" + channelType + ".BOOT');\n" +
    "object oEnergyCounter = chn.DPByControl('" + channelType + "." + counter + "');\n" +
    "object oSysVarEnergyCounter = dom.GetObject('" + sysVarId + "');\n" +
    "object oSysVarEnergyCounterOldVal = dom.GetObject('" + sysVarOldValId + "');\n" +
    "object oSysVarEnergyCounterResetPressed = dom.GetObject('" + sysVarId + "_RESET');\n" +
    "object oSysVarEnergyCounterTmpOldVal = dom.GetObject('" + sysVarId + "_TMP_OLDVAL');\n" +
    "object oSysVarEnergyCounterDeviceReset = dom.GetObject('" + sysVarId + "_DEVICE_RESET');\n" +

    "boolean bootFlag = oBoot.Value();\n" +
    "real devVal = oEnergyCounter.Value();\n" +
    "real devValMax = oEnergyCounter.ValueMax();\n" +
    "real oldDevVal = oSysVarEnergyCounterOldVal.Value();\n" +
    "real tmpOldDevVal = oSysVarEnergyCounterTmpOldVal.Value();\n" +
    "integer ioldDevVal = (tmpOldDevVal.ToString().ToFloat() * 100000).ToInteger();\n" +
    "real diffVal = 0.0;\n" +
    "real sysVarVal = oSysVarEnergyCounter.Value();\n" +
    "integer tmp_devVal = (devVal.ToString().ToFloat() * 100000).ToInteger();\n" +
    "integer tmp_oldDevVal = (oldDevVal.ToString().ToFloat() * 100000).ToInteger();\n" +

    "if ( oBoot.Value() == true ) {\n" +
    "   oSysVarEnergyCounterDeviceReset.State(true);\n" +
    "   if (ioldDevVal <= 0) {\n" +
    "     oSysVarEnergyCounter.State(0);\n" +
    "   }\n" +
    "} else {\n" +
    "   boolean resetPressed = oSysVarEnergyCounterResetPressed.Value();\n" +
    "   ! boolean devReset = oSysVarEnergyCounterDeviceReset.Value();\n" +
    "   if ( (resetPressed == true) && (oSysVarEnergyCounterDeviceReset.Value() == true) ) {\n" +
    "       oSysVarEnergyCounterTmpOldVal.State(0);\n" +
    "       tmpOldDevVal = 0;\n" +
    "   }\n" +
    "  !Normales Hochzaehlen. Geraetwert > vorheriger Wert\n" +
    "  if ((tmp_devVal >= tmp_oldDevVal) && (oSysVarEnergyCounterDeviceReset.Value() == false)) {\n" +
    "   if (resetPressed == false) {\n" +
    "      diffVal = oEnergyCounter.Value() - oldDevVal;\n" +
    "    } else {\n" +
    "      !Reset pressed\n" +
    "      diffVal = oEnergyCounter.Value() - tmpOldDevVal;\n" +
    "      if ((diffVal.ToString().ToFloat() * 100000).ToInteger() < 0 ) {\n" +
    "		     diffVal = oEnergyCounter.Value();\n" +
    "      }\n" +
    "      oSysVarEnergyCounterResetPressed.State(0);\n" +
    "    }\n" +
    "  } else {\n" +
    "    !Geraetewert ist kleiner vorheriger Wert\n" +
    "   !Entweder Ueberlauf, oder Batterietausch\n" +
    "    if (oSysVarEnergyCounterDeviceReset.Value() == false) {\n" +
    "      !Normaler Geraeteueberlauf\n" +
    "      if(tmp_devVal > 0) {\n" +
    "         diffVal = (oEnergyCounter.Value() + devValMax) - oldDevVal;\n" +
    "      }\n" +
    "    } else {\n" +
    "         !Zaehle Geraetewert zum CCU-Zaehler\n" +
    "          diffVal = oEnergyCounter.Value();\n" +
    "          if ((diffVal.ToString().ToFloat() * 100000).ToInteger() == 0) {\n" +
    "	            oSysVarEnergyCounterDeviceReset.State(true);\n" +
    "           } else {\n" +
    "            oSysVarEnergyCounterDeviceReset.State(false);\n" +
    "          }\n" +
    "    }\n" +
    "  }\n" +
    "  !Erhoehe den CCU-Zaehler\n" +
    "  oSysVarEnergyCounter.State(sysVarVal + diffVal);\n" +
    "  oSysVarEnergyCounterOldVal.State(oEnergyCounter.Value());\n" +
    "  oSysVarEnergyCounterTmpOldVal.State(oEnergyCounter.Value());\n" +
    "}\n";

  var script =
    "var sysVarId = '" + sysVarId + "';\n" +
    "var channel = dom.GetObject('" + chn.id + "');\n" +
    "var channelId = channel.ID();\n" +
    "var paramId = channel.DPByControl('" + channelType + "." + counter + "').ID();\n" +
    "var _script = \"" + updateScript + "\";\n" +

    "var DP_VALUE_CHECK_UPDATE = 13;" +

    "var programs = dom.GetObject(ID_PROGRAMS);" +
    "var program  = dom.CreateObject(OT_PROGRAM);" +
    "program.Name('prgEnergyCounter" + prgNameExtension + "_" + chn.id + "_" + chn.address + "');" +
    "program.Internal(true);" +
    "programs.Add(program.ID());" +


    "var rule = program.Rule();" +
    "rule.RuleOperatorType(OPERATOR_NONE);" +

    "var condition = rule.RuleAddCondition();" +
    "condition.CndOperatorType(OPERATOR_NONE);" +

    "var singleCondition = condition.CndAddSingle();" +
    "singleCondition.OperatorType(OPERATOR_NONE);" +
    "singleCondition.ConditionType(9);" +
    "singleCondition.ConditionType2(DP_VALUE_CHECK_UPDATE);" +
    "singleCondition.LeftValType(ivtObjectId);" +
    "singleCondition.LeftVal(paramId);" +
    "singleCondition.RightVal1ValType(ivtFloat);" +
    "singleCondition.RightVal1(0.0);" +
    "singleCondition.RightVal2ValType(ivtFloat);" +
    "singleCondition.RightVal2(0.0);" +

    "singleCondition.ConditionChannel(channelId);" +

    "var destination = rule.RuleDestination();" +
    "var action = destination.DestAddSingle();" +
    "action.DestinationParam(ivtString);" +
    "action.DestinationValueType(ivtString);" +
    "action.DestinationValue(_script);" +

    "program.Active(true);" +
    "dom.RTUpdate(0);";

  homematic("ReGa.runScript", {"script": script});
};


//HmIP-PSM EnergyCounter
CreateSysVarEnergyCounterScriptPSM = function(chn) {

  var sysVarIds = getSysVarEnergyCounterIds(chn);
  var sysVarId = sysVarIds.counterId,
    sysVarOldValId = sysVarIds.tmpCounterId;

  var updateScript =
  "object chn = dom.GetObject('"+chn.id+"');\n" +
  "object oOverflow = chn.DPByControl('POWERMETER_PSM.ENERGY_COUNTER_OVERFLOW');\n" +
  "object oEnergyCounter = chn.DPByControl('POWERMETER_PSM.ENERGY_COUNTER');\n" +
  "object oSysVarEnergyCounter = dom.GetObject('"+sysVarId+"');\n" +
  "object oSysVarEnergyCounterOldVal = dom.GetObject('"+sysVarOldValId+"');\n" +

  "boolean overFlowFlag = oOverflow.Value();\n" +
  "real devVal = oEnergyCounter.Value();\n" +
  "real devValMax = oEnergyCounter.ValueMax();\n" +
  "real oldDevVal = oSysVarEnergyCounterOldVal.Value();\n" +
  "real diffVal = 0.0;\n" +
  "real sysVarVal = oSysVarEnergyCounter.Value();\n" +
  "integer tmp_devVal = (devVal.ToString().ToFloat() * 1000).ToInteger();\n" +
  "integer tmp_oldDevVal = (oldDevVal.ToString().ToFloat() * 1000).ToInteger();\n" +


  "if (overFlowFlag == false) {\n" +
    "! Normal conditions\n" +
    "if (tmp_oldDevVal <= tmp_devVal) {\n" +
       "diffVal = devVal - oldDevVal;\n" +
    "}\n" +

    "! Device has rebooted\n" +
    "if (tmp_oldDevVal > tmp_devVal) {\n" +
       "diffVal = devVal;\n" +
    "}\n"+

  "} else {\n" +
    "!overFlow is true\n" +
    "if (tmp_oldDevVal > tmp_devVal) {\n" +
      "! An device overflow has occured\n" +
      "diffVal = (devVal + devValMax) - oldDevVal;\n" +
    "} else {\n" +
      "! Once the overflow flag has been set it will only be false when the device reboots\n"+
      "! Therefore this is the normal condition after an device overflow\n" +
      "diffVal = devVal - oldDevVal;\n" +
    "}\n" +
  "}\n" +

  "oSysVarEnergyCounterOldVal.State(devVal);\n" +
  "oSysVarEnergyCounter.State(sysVarVal + diffVal);\n";

  var script =
  "var sysVarId = '"+sysVarId+"';\n" +
  "var channel = dom.GetObject('"+chn.id+"');\n" +
  "var channelId = channel.ID();\n" +
  "var paramId = channel.DPByControl('POWERMETER_PSM.ENERGY_COUNTER').ID();\n"+
  "var _script = \""+updateScript+"\";\n" +

  "var DP_VALUE_CHECK_UPDATE = 13;"+

  "var programs = dom.GetObject(ID_PROGRAMS);"+
  "var program  = dom.CreateObject(OT_PROGRAM);"+
  "program.Name('prgEnergyCounter_"+ chn.id +"_"+chn.address+"');"+
  "program.Internal(true);"+
  "programs.Add(program.ID());"+


  "var rule = program.Rule();"+
  "rule.RuleOperatorType(OPERATOR_NONE);"+

  "var condition = rule.RuleAddCondition();"+
  "condition.CndOperatorType(OPERATOR_NONE);"+

  "var singleCondition = condition.CndAddSingle();"+
  "singleCondition.OperatorType(OPERATOR_NONE);"+
  "singleCondition.ConditionType(9);"+
  "singleCondition.ConditionType2(DP_VALUE_CHECK_UPDATE);"+
  "singleCondition.LeftValType(ivtObjectId);"+
  "singleCondition.LeftVal(paramId);"+
  "singleCondition.RightVal1ValType(ivtFloat);"+
  "singleCondition.RightVal1(0.0);"+
  "singleCondition.RightVal2ValType(ivtFloat);"+
  "singleCondition.RightVal2(0.0);"+

  "singleCondition.ConditionChannel(channelId);"+

  "var destination = rule.RuleDestination();"+
  "var action = destination.DestAddSingle();"+
  "action.DestinationParam(ivtString);"+
  "action.DestinationValueType(ivtString);"+
  "action.DestinationValue(_script);"+

  "program.Active(true);"+
  "dom.RTUpdate(0);";

  homematic("ReGa.runScript", {"script": script});
};

//POWERMETER_IEC1
CreateSysVarEnergyCounterScriptIEC = function(chn) {

  var sysVarIds = getSysVarEnergyCounterIECIds(chn);
  var sysVarId = sysVarIds.counterId,
    sysVarOldValId = sysVarIds.tmpCounterId;

  var updateScript =
  "object chn = dom.GetObject('"+chn.id+"');\n" +
  "object oEnergyCounter = chn.DPByControl('POWERMETER_IEC1.IEC_ENERGY_COUNTER');\n" +
  "object oSysVarEnergyCounter = dom.GetObject('"+sysVarId+"');\n" +
  "object oSysVarEnergyCounterOldVal = dom.GetObject('"+sysVarOldValId+"');\n" +

  "real devVal = oEnergyCounter.Value();\n" +
  "real devValMax = oEnergyCounter.ValueMax();\n" +
  "real oldDevVal = oSysVarEnergyCounterOldVal.Value();\n" +
  "real diffVal = 0.0;\n" +
  "real sysVarVal = oSysVarEnergyCounter.Value();\n" +
  "integer tmp_devVal = (devVal.ToString().ToFloat() * 1000).ToInteger();\n" +
  "integer tmp_oldDevVal = (oldDevVal.ToString().ToFloat() * 1000).ToInteger();\n" +


    "!overFlow is true\n" +
    "if (tmp_oldDevVal > tmp_devVal) {\n" +
      "! An device overflow has occured\n" +
      "diffVal = (devVal + devValMax) - oldDevVal;\n" +
    "} else {\n" +
      "! This is the normal condition\n" +
      "diffVal = devVal - oldDevVal;\n" +
    "}\n" +

  "oSysVarEnergyCounterOldVal.State(devVal);\n" +
  "oSysVarEnergyCounter.State(sysVarVal + diffVal);\n";

  var script =
  "var sysVarId = '"+sysVarId+"';\n" +
  "var channel = dom.GetObject('"+chn.id+"');\n" +
  "var channelId = channel.ID();\n" +
  "var paramId = channel.DPByControl('POWERMETER_IEC1.IEC_ENERGY_COUNTER').ID();\n"+
  "var _script = \""+updateScript+"\";\n" +

  "var DP_VALUE_CHECK_UPDATE = 13;"+

  "var programs = dom.GetObject(ID_PROGRAMS);"+
  "var program  = dom.CreateObject(OT_PROGRAM);"+
  "program.Name('prgEnergyCounterIEC_"+ chn.id +"_"+chn.address+"');"+
  "program.Internal(true);"+
  "programs.Add(program.ID());"+


  "var rule = program.Rule();"+
  "rule.RuleOperatorType(OPERATOR_NONE);"+

  "var condition = rule.RuleAddCondition();"+
  "condition.CndOperatorType(OPERATOR_NONE);"+

  "var singleCondition = condition.CndAddSingle();"+
  "singleCondition.OperatorType(OPERATOR_NONE);"+
  "singleCondition.ConditionType(9);"+
  "singleCondition.ConditionType2(DP_VALUE_CHECK_UPDATE);"+
  "singleCondition.LeftValType(ivtObjectId);"+
  "singleCondition.LeftVal(paramId);"+
  "singleCondition.RightVal1ValType(ivtFloat);"+
  "singleCondition.RightVal1(0.0);"+
  "singleCondition.RightVal2ValType(ivtFloat);"+
  "singleCondition.RightVal2(0.0);"+

  "singleCondition.ConditionChannel(channelId);"+

  "var destination = rule.RuleDestination();"+
  "var action = destination.DestAddSingle();"+
  "action.DestinationParam(ivtString);"+
  "action.DestinationValueType(ivtString);"+
  "action.DestinationValue(_script);"+

  "program.Active(true);"+
  "dom.RTUpdate(0);";

  homematic("ReGa.runScript", {"script": script});
};

getSysVarEnergyCounterIds = function (chn) {
  return {"counterId": "svEnergyCounter_" + chn.id + "_" + chn.address, "tmpCounterId": "svEnergyCounterOldVal_" + chn.id};
};

getSysVarEnergyCounterGasIds = function (chn) {
  return {"counterId": "svEnergyCounterGas_" + chn.id + "_" + chn.address, "tmpCounterId": "svEnergyCounterGasOldVal_" + chn.id};
};

getSysVarEnergyCounterIECIds = function (chn) {
  return {"counterId": "svEnergyCounterIEC_" + chn.id + "_" + chn.address, "tmpCounterId": "svEnergyCounterIECOldVal_" + chn.id};
};

CheckAndCreateSysVarEnergyCounter = function(chn) {
  var sysVarIds = getSysVarEnergyCounterIds(chn);
  var SysVarEnergyCounterId = sysVarIds.counterId,
   SysVarEnergyCounterOldValId = sysVarIds.tmpCounterId;

  var oSysVarEnergyCounter = homematic("SysVar.get", {"id" : SysVarEnergyCounterId});

  // SysVar svEnergyCounter_xxxx doesn´t exist
  if (!oSysVarEnergyCounter) {
    conInfo("create system variable: " + SysVarEnergyCounterId);
    oSysVarEnergyCounter = CreateSysVarEnergyCounter(SysVarEnergyCounterId, "float");
    CreateSysVarEnergyCounter(SysVarEnergyCounterOldValId, "float");
    if (chn.channelType == "ENERGIE_METER_TRANSMITTER") {
      conInfo("CreateSysVarEnergyCounterScriptPSM");
      CreateSysVarEnergyCounterScriptPSM(chn);
    } else {
      conInfo("CreateSysVarEnergyCounterScript");
      CreateSysVarEnergyCounterScript(chn);
    }
    readEnergyCounter = true; // sorgt dafür, daß die Liste der EnergyCounter aktualisiert wird.
  }
};

//***

CheckAndCreateSysVarEnergyCounterIEC = function(chn) {
  conInfo("CheckAndCreateSysVarEnergyCounterIEC");
  var sysVarIds = getSysVarEnergyCounterIECIds(chn);
  var SysVarEnergyCounterId = sysVarIds.counterId,
   SysVarEnergyCounterOldValId = sysVarIds.tmpCounterId;

   var oSysVarEnergyCounter = homematic("SysVar.get", {"id" : SysVarEnergyCounterId});

  // SysVar svEnergyCounter_xxxx doesn´t exist
  if (!oSysVarEnergyCounter) {
    conInfo("create system variable: " + SysVarEnergyCounterId);
    oSysVarEnergyCounter = CreateSysVarEnergyCounter(SysVarEnergyCounterId, "float");
    CreateSysVarEnergyCounter(SysVarEnergyCounterOldValId, "float");
    conInfo("CreateSysVarEnergyCounterScriptIEC");
    CreateSysVarEnergyCounterScriptIEC(chn);
    readEnergyCounter = true; // sorgt dafür, daß die Liste der EnergyCounter aktualisiert wird.
  }
};

//***


CheckAndCreateSysVarEnergyCounterIGL = function (chn, channelType) {
  conInfo("CheckAndCreateSysVarEnergyCounterIGL");
  var sysVarIds = getSysVarEnergyCounterIds(chn);
  var SysVarEnergyCounterId = sysVarIds.counterId,
    SysVarEnergyCounterOldValId = sysVarIds.tmpCounterId;

  var oSysVarEnergyCounter = homematic("SysVar.get", {"id": SysVarEnergyCounterId});

  // SysVar svEnergyCounter_xxxx doesn´t exist
  if (!oSysVarEnergyCounter) {
    conInfo("create system variable: " + SysVarEnergyCounterId);
    oSysVarEnergyCounter = CreateSysVarEnergyCounter(SysVarEnergyCounterId, "float");
    CreateSysVarEnergyCounter(SysVarEnergyCounterOldValId, "float");
    CreateSysVarEnergyCounter(SysVarEnergyCounterId + "_RESET", "boolean");
    CreateSysVarEnergyCounter(SysVarEnergyCounterId + "_TMP_OLDVAL", "float");
    CreateSysVarEnergyCounter(SysVarEnergyCounterId + "_DEVICE_RESET", "boolean");
    CreateSysVarEnergyCounterScriptIGL(chn, channelType, "CURRENT");
    readEnergyCounter = true; // sorgt dafür, daß die Liste der EnergyCounter aktualisiert wird.
  }
};

CheckAndCreateSysVarEnergyCounterGasIGL = function (chn, channelType) {
  conInfo("CheckAndCreateSysVarEnergyCounterGasIGL");
  var sysVarIds = getSysVarEnergyCounterGasIds(chn);
  var SysVarEnergyCounterId = sysVarIds.counterId,
    SysVarEnergyCounterOldValId = sysVarIds.tmpCounterId;

  var oSysVarEnergyCounterGas = homematic("SysVar.get", {"id": SysVarEnergyCounterId});

  // SysVar svEnergyCounterGas_xxxx doesn´t exist
  if (!oSysVarEnergyCounterGas) {
    conInfo("create system variable: " + SysVarEnergyCounterId);
    oSysVarEnergyCounterGas = CreateSysVarEnergyCounter(SysVarEnergyCounterId, "float");
    CreateSysVarEnergyCounter(SysVarEnergyCounterOldValId, "float");
    CreateSysVarEnergyCounter(SysVarEnergyCounterId + "_RESET", "boolean");
    CreateSysVarEnergyCounter(SysVarEnergyCounterId + "_TMP_OLDVAL", "float");
    CreateSysVarEnergyCounter(SysVarEnergyCounterId + "_DEVICE_RESET", "boolean");
    CreateSysVarEnergyCounterScriptIGL(chn, channelType, "GAS");
    readEnergyCounter = true; // sorgt dafür, daß die Liste der EnergyCounter aktualisiert wird.
  }
};

CheckIfDevHasPowerMeter = function (devId) {
  var oDevice = homematic("Device.get", {"id": devId});
  if (oDevice) {
    ShowWaitAnim();
    jQuery.each(oDevice.channels, function (index, channel) {
      var channelType = GetChannelType(channel);
      if (channelType == "POWERMETER") {
        CheckAndCreateSysVarEnergyCounter(channel);
      }

      if (channelType == "POWERMETER_IGL") {
        CheckAndCreateSysVarEnergyCounterIGL(channel, channelType);
        CheckAndCreateSysVarEnergyCounterGasIGL(channel, channelType);
      }

      if (channelType == "ENERGIE_METER_TRANSMITTER") {
        CheckAndCreateSysVarEnergyCounter(channel);
      }

      if (channelType == "POWERMETER_IEC1") {
        // IEC Sensor 1
        CheckAndCreateSysVarEnergyCounterIGL(channel, channelType);
        CheckAndCreateSysVarEnergyCounterGasIGL(channel, channelType);
        CheckAndCreateSysVarEnergyCounterIEC(channel);
      }
    });
    HideWaitAnim();
  }
};

SetReadyConfigAndHideImgs = function (devId) {
  var _devId_ = devId;

  CheckIfDevHasPowerMeter(_devId_);

  var doSetReady = function () {
    iNewDevCount--;
    hideImages(_devId_);

    iseDevices.setReadyConfig(_devId_);
    if (iNewDevCount == 0) {
      $("newDevTbl").hide();
      //$("noNewDevs").innerHTML = "Alle Ger&auml;te wurden konfiguriert.";
      $("noNewDevs").innerHTML = translateKey("dialogNewDevicesLblAllDevicesConfigured");
      $("noNewDevs").show();
    }
    for (var i = 0; i < arDevices.length; i++) {
      if (arDevices[i]['id'] == _devId_) {
        if (arDevices[i]['expanded']) {
          iDevicesExpanded--;
        }
      }
    }
    refreshFooterButton();
  };

  var readyButton = $("readyBtn" + devId);

  // Hiermit kann abgefragt werden, ob schon alle Kanäle konifugiert sind.
  // Zur Zeit deaktiviert, da von vielen Kunden nicht erwünscht.
  /*
   if (readyButton)
   {
   if (readyButton._isReady)
   {
   doSetReady();
   }
   else
   {
   new YesNoDialog("Gerät fertig konfigurieren", "Es sind noch nicht alle Kanäle fertig konfiguriert. Möchten Sie dennoch fortfahren?", function(result) {
   if (result == YesNoDialog.RESULT_YES)
   {
   doSetReady();
   }
   });
   }
   }
   */

  // Hiermit wird verhindert, daß abgefragt wird, ob schon alle Kanäle
  // konfiguriert sind.

  if (readyButton) {
    doSetReady();
  }

};

specialReloadPage = function () {
  if (bNecc) {
    reloadPage();
  }
};

hideImages = function (devId) {
  var count = arDevices.length;
  for (var i = 0; i < count; i++) {
    if (arDevices[i]['id'] == devId) {
      hide('picDiv' + arDevices[i]['id']);
      if (arDevices[i]['chns']) {
        for (var x = 0; x < arDevices[i]['chns'].length; x++) {
          hide('picDiv' + arDevices[i]['chns'][x]['id']);
        }
      }
      if (arDevices[i]['chnsgr']) {
        for (var x = 0; x < arDevices[i]['chnsgr'].length; x++) {
          collapseGroup(devId, arDevices[i]['chnsgr'][x][0]['id'], arDevices[i]['chnsgr'][x][1]['id'], false);
          hide('picDiv' + arDevices[i]['chnsgr'][x][0]['id'] + arDevices[i]['chnsgr'][x][1]['id']);
        }
      }
    }
  }
};
translatePage("#content");
</script>
