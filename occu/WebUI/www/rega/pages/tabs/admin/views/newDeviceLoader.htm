<script type="text/javascript">
  var bShowPics = true;
  
  deviceData = null;
  Group = new Array(); // [0]: Member 1,  [1]: Member 2
  GroupsArray = new Array(); // Alle Gruppen
  chns = new Array(); // kanäle ohne gruppe
  iElemsAdded = 0;
  
<% 
Write("var arIdx = "#system.GetVar("arIdx")#";");
Write("var iInsIdx = "#system.GetVar("insIdx")#";");
string category = "";

object dev = dom.GetObject(system.GetVar("devid"));
if ( dev && (dev.ReadyConfig() == false) && (dev.Name() != 'Gateway') && (dev.Interface() != ID_ERROR)) {
  string tmp = "";
  Write("deviceData = new Object();");
  Write("deviceData['id'] = "#dev.ID()#";");
  Write("deviceData['name'] = '"#dev.Name()#"';");
  Write("deviceData['type'] = '"#dev.Label()#"';");
  string sIface = "";
  integer iface = dev.Interface();
  if (iface != ID_ERROR) {
    sIface = dom.GetObject(iface).Name();
  }
  
  ! # # # # # # # # # # # # # # # # # # # # # # # #
  ! # # # #  Elemente mit Gruppen
  ! # # # # # # # # # # # # # # # # # # # # # # # #
  integer gE = 0;
  string chnTmp = "";
  foreach( chnTmp, dev.EnumChannelGroups(true) )
  {
    gE = (gE%2);
    string trId = dev.ID()#chnTmp;
    object chn = dom.GetObject(chnTmp);
    if( chn )
    {
      Write("deviceData['hasSubs'] = true;");
      Write( 'conInfo( "GroupElem: '#gE#'" );' );
      if( gE == 0 )
      {
        Write("Group = new Array();");      
      }
      Write("Group["#gE#"] = new Object();");
      Write("Group["#gE#"]['id'] = "#chn.ID()#";");
      Write("Group["#gE#"]['type'] = 'Ch.&nbsp;"#chn.ChnNumber()#"';");
      Write("Group["#gE#"]['pic'] = '';");
      Write("Group["#gE#"]['desc'] = DEV_getDescription(deviceData['type']);");
      Write("Group["#gE#"]['sn'] = '"#chn.Address()#"';");
      category = "";
      if (chn.ChnDirection() == 1) {category = "${lblSender}";}
      if (chn.ChnDirection() == 2) {category = "${lblReceiver}";}
      Write("Group["#gE#"]['iface'] = '"#category#"';");
      Write("Group["#gE#"]['deviface'] = '"#sIface#"';");
      Write("Group["#gE#"]['transOp'] = '"#chn.ChnAESOperation()#"';");
      Write("Group["#gE#"]['trans'] = ("#chn.ChnAESActive()#" ? '${lblSecured}' : '${lblStandard}' );");
      Write("Group["#gE#"]['name'] = '"#chn.Name()#"';");

      Write("console.dir(Group);");

      string functions = "";
      string funcTmp = "";
      foreach(funcTmp, chn.ChnFunction()) {
        object objTmp = dom.GetObject(funcTmp);
        functions = functions # objTmp.Name() # ";";
      }
      Write("Group["#gE#"]['func'] = '"#functions#"';");
      string rooms = "";
      string roomTmp = "";
      foreach(roomTmp, chn.ChnRoom()) {
        object objTmp = dom.GetObject(roomTmp);
        rooms = rooms # objTmp.Name() # ";";
      }
      Write("Group["#gE#"]['room'] = '"#rooms#"';");
      Write("Group["#gE#"]['action'] = '';");
      Write("Group["#gE#"]['links'] = '';");
      Write("Group["#gE#"]['ready'] = "#chn.ReadyConfig()#";");
      boolean bFound3 = false;
      object oDpTmp = dom.GetObject( chn.DefaultDPWrite() );
      if( oDpTmp )
      {
        if( (!oDpTmp.IsTypeOf( OT_VARDP )) && (!oDpTmp.IsTypeOf( OT_ALARMDP )) )
        {
          bFound3 = true;
        }
      }
      if( bFound3 )
      {
        boolean bHasFullAccess = (chn.UserAccessRights(iulOtherThanAdmin) == iarFullAccess);
        if( bHasFullAccess )
        {
          Write("Group["#gE#"]['handle'] = 'YES';");
        }
        else
        {
          Write("Group["#gE#"]['handle'] = 'NO';");
        }
      }
      else
      {
        Write("Group["#gE#"]['handle'] = 'READONLY';");
      }
      Write( "Group["#gE#"]['vis'] = "#(chn.Visible())#";");
      !Write( 'conInfo( "Group '#gE#':'#chn.ID()#': '#(chn.Visible())#'" );' );
      Write("Group["#gE#"]['proto'] = "#(chn.ChnArchive())#";");
      Write("Group["#gE#"]['chnNr'] = "#(chn.ChnNumber())#";");
      
      if( chn.ExistComTestDP() )
      {
        Write("Group["#gE#"]['comtestdp'] = true;");
      }
      else
      {
        Write("Group["#gE#"]['comtestdp'] = false;");
      }
    
      string s;
      foreach(s,dom.TestRunningIDs().EnumIDs())
      {
        if( s == chn.ID().ToString() )
        {
          Write("Group["#gE#"]['testrunning'] = true;");
        }
        else
        {
          Write("Group["#gE#"]['testrunning'] = false;");
        }
      }
      
      string sTimestamp = chn.TestCompletedTime();
      Call("/esp/TimeStamp.fn::TimeStampToString3()");
      Write("Group["#gE#"]['testtime'] = '"#sTimestamp#"';");
      
      string sTimestamp = chn.TestCompletedTime(true);
      Call("/esp/TimeStamp.fn::TimeStampToString3()");
      Write("Group["#gE#"]['lasttesttime'] = '"#sTimestamp#"';");
      
      if( gE )
      {
        Write("GroupsArray[GroupsArray.length] = Group;");
      }
      gE = gE + 1;
    }
  }
  
  ! # # # # # # # # # # # # # # # # # # # # # # # #
  ! # # # #  Elemente ohne Gruppen
  ! # # # # # # # # # # # # # # # # # # # # # # # #
  chnTmp = "";
  foreach(chnTmp, dev.EnumChannelGroups(false)) {
    string trId = dev.ID() # chnTmp;
    object chn = dom.GetObject(chnTmp);
    !if (chn) {
    if (chn && (chn.HssType() != "MAINTENANCE") && (chn.HssType() != "WEEK_PROGRAM") ) {
      Write("deviceData['hasSubs'] = true;");
      Write('var tmp = new Object();');
      Write("tmp['id'] = "#chn.ID()#";");
      Write("tmp['name'] = '"#chn.Name()#"';");
      Write("tmp['type'] = '"#chn.Label()#"';");
      Write("tmp['pic'] = '';");
      Write("tmp['desc'] = DEV_getDescription(deviceData['type']);");     
      Write("tmp['sn'] = '"#chn.Address()#"';");
      Write("tmp['hssType'] = '"#chn.HssType()#"';");

      category = "";
      if (chn.ChnDirection() == 1) {category = '${lblSender}' ;}
      if (chn.ChnDirection() == 2) {category = '${lblReceiver}' ;}
      Write("tmp['iface'] = '"#category#"';");
      Write("tmp['deviface'] = '"#sIface#"';");
      Write("tmp['transOp'] = '"#chn.ChnAESOperation()#"';");
      !Write("tmp['trans'] = ("#chn.ChnAESActive()#" ? 'Gesichert' : 'Standard');");
      Write("tmp['trans'] = ("#chn.ChnAESActive()#" ? '${lblSecured}' : '${lblStandard}');");
      string functions = "";
      string funcTmp = "";
      foreach(funcTmp, chn.ChnFunction()) {
        object objTmp = dom.GetObject(funcTmp);
        functions = functions # objTmp.Name() # ";";
      }
      Write("tmp['func'] = '"#functions#"';");
      string rooms = "";
      string roomTmp = "";
      foreach(roomTmp, chn.ChnRoom()) {
        object objTmp = dom.GetObject(roomTmp);
        rooms = rooms # objTmp.Name() # ";";
      }
      Write("tmp['room'] = '"#rooms#"';");
      Write("tmp['action'] = '';");
      Write("tmp['links'] = '';");
      Write("tmp['ready'] = "#chn.ReadyConfig()#";");
      boolean bFound3 = false;
      object oDpTmp = dom.GetObject( chn.DefaultDPWrite() );
      if( oDpTmp )
      {
        if( (!oDpTmp.IsTypeOf( OT_VARDP )) && (!oDpTmp.IsTypeOf( OT_ALARMDP )) )
        {
          bFound3 = true;
        }
      }
      if( bFound3 )
      {
        boolean bHasFullAccess = (chn.UserAccessRights(iulOtherThanAdmin) == iarFullAccess);
        if( bHasFullAccess )
        {
          Write("tmp['handle'] = 'YES';");
        }
        else
        {
          Write("tmp['handle'] = 'NO';");
        }
      }
      else
      {
        Write("tmp['handle'] = 'READONLY';");
      }
      Write("tmp['vis'] = "#(chn.Visible())#";");
      Write("tmp['proto'] = "#(chn.ChnArchive())#";");
      Write("tmp['chnNr'] = "#(chn.ChnNumber())#";");
      
      if( chn.ExistComTestDP() )
      {
        Write("tmp['comtestdp'] = true;");
      }
      else
      {
        Write("tmp['comtestdp'] = false;");
      }
      
      string s;
      foreach(s,dom.TestRunningIDs().EnumIDs())
      {
        if( s == chn.ID().ToString() )
        {
          Write("tmp['testrunning'] = true;");
        }
        else
        {
          Write("tmp['testrunning'] = false;");
        }
      }
      
      string sTimestamp = chn.TestCompletedTime();
      Call("/esp/TimeStamp.fn::TimeStampToString3()");
      Write("tmp['testtime'] = '"#sTimestamp#"';");
      
      Write("chns[chns.length] = tmp;");
    }
  }
}
%>
  if (deviceData != null) {
    var td = null;
    var tr = null;
    var img = null;
   
    // Kanalgruppen
    for (var i = 0; i < GroupsArray.length; i++)
    {
      conInfo( "ChannelGroup "+i );
      arSubIds[arSubIds.length] = ""+  deviceData['id'] + GroupsArray[i][0]['id'] + GroupsArray[i][1]['id'];
      tr = $("tblNewDevices").insertRow(iInsIdx++);iElemsAdded++;
      tr.id =  ""+ deviceData['id'] + GroupsArray[i][0]['id'] + GroupsArray[i][1]['id'];
      GroupsArray[i]['trid'] = tr.id;
      td = Builder.node('td',{className: 'DeviceListCell_Invisible'}); tr.appendChild(td);
      td = Builder.node('td',{className: 'DeviceListCell_Invisible'});
      
      img = Builder.node('img', {src: "/ise/img/plus.png", id:"img" + GroupsArray[i][0]['id'] + GroupsArray[i][1]['id'], alt:"plus",
                                 onclick: "expandGroup(" + deviceData['id'] + "," + GroupsArray[i][0]['id'] + "," + GroupsArray[i][1]['id'] + ")"});
      arImgIds[arImgIds.length] = "img" + GroupsArray[i][0]['id'] + GroupsArray[i][1]['id'];
      td.appendChild(img);

      tr.appendChild(td);
      td = Builder.node('td', {colSpan: 2, className: 'GrayBkg border1px'}, strCut(GroupsArray[i][0]['type'] + " " + GroupsArray[i][1]['type'])); tr.appendChild(td);
      td.innerHTML = GroupsArray[i][0]['type'] + "<br/>" + GroupsArray[i][1]['type'];
      
      td = Builder.node('td', {className: 'WhiteBkgPic border1px'}, [
         Builder.node('div', {id: 'picDiv' + GroupsArray[i][0]['id'] + GroupsArray[i][1]['id'], className: "CLASS04401",
           onmouseover:"picDivShow(jg_250, '"+deviceData['type']+"', 250, '" + GroupsArray[i][0]['chnNr']+ "+" + GroupsArray[i][1]['chnNr']+"', this);", onmouseout:"picDivHide(jg_250);"})
      ]);
      Element.addClassName(td, "CLASS04402");
      tr.appendChild(td);
      
      //td = Builder.node('td', {className: 'GrayBkg border1px'}, translateKey(strCut(DEV_getDescription(deviceData['type']))) ); tr.appendChild(td);
      td = Builder.node('td', {className: 'GrayBkg border1px'}, translateKey(DEV_getDescription(deviceData['type'])) ); tr.appendChild(td);
      td = Builder.node('td', {className: 'GrayBkg border1px'}, strCut(GroupsArray[i][0]['sn'] + " " + GroupsArray[i][1]['sn'])); tr.appendChild(td);
      var sIface = (GroupsArray[i][0]['iface'] != GroupsArray[i][1]['iface'] ? GroupsArray[i][0]['iface'] + " " +  GroupsArray[i][1]['iface'] : GroupsArray[i][0]['iface']);
      td = Builder.node('td', {className: 'GrayBkg border1px'}, sIface); tr.appendChild(td);
      
      td = Builder.node('td', {id: 'trans' + GroupsArray[i][0]['id'] + GroupsArray[i][1]['id'], 
                     className: 'GrayBkg border1px'}, removeDuplicates(GroupsArray[i][0]['trans'], GroupsArray[i][1]['trans'], "")); tr.appendChild(td);
      
      td = Builder.node('td', {className: 'GrayBkg border1px'}, strCut(GroupsArray[i][0]['name'] + " " + GroupsArray[i][1]['name'])); tr.appendChild(td);
      var sGrRoId = 'funcs' + GroupsArray[i][0]['id'] + GroupsArray[i][1]['id'];
      td = Builder.node('td', {id: sGrRoId, className: 'GrayBkg border1px'}, removeDuplicates(GroupsArray[i][0]['func'],  GroupsArray[i][1]['func'], ';')); tr.appendChild(td);
      var sGrRoId = 'rooms' + GroupsArray[i][0]['id'] + GroupsArray[i][1]['id'];
      td = Builder.node('td', {id: sGrRoId, className: 'GrayBkg border1px'}, removeDuplicates(GroupsArray[i][0]['room'], GroupsArray[i][1]['room'], ';')); tr.appendChild(td);
      td = Builder.node('td', {className: 'WhiteBkg border1px'}, '');
      
      var bTestRunning = GroupsArray[i][0]['testrunning'] | GroupsArray[i][1]['testrunning'];
      var bComTestDP = GroupsArray[i][0]['comtestdp'] | GroupsArray[i][1]['comtestdp'];
      writeTestField(td, GroupsArray[i][0]['id'].toString() + "\t" + GroupsArray[i][1]['id'].toString(),GroupsArray[i][1]['lasttesttime'],bComTestDP,bTestRunning);
      
      tr.appendChild(td);
      td = Builder.node('td', {className: 'WhiteBkg border1px'}, '');
      writeDeviceAction(td, false, false, false, GroupsArray[i][0], true);
      tr.appendChild(td);
      td = Builder.node('td', {className: 'GrayBkg border1px'}, '');
      var input = Builder.node('input', {id: "ready" + GroupsArray[i][0]['id'] + GroupsArray[i][1]['id'], type: 'checkbox', disabled: 'disabled'});
      input.checked = (GroupsArray[i][0]['ready'] && GroupsArray[i][1]['ready']);
      td.appendChild(input);
      tr.appendChild(td); 
      var jg_0 = new jsGraphics('picDiv' + GroupsArray[i][0]['id'] +GroupsArray[i][1]['id']);
      InitGD(jg_0, 50);
      Draw(jg_0, deviceData['type'], 50, "" + GroupsArray[i][0]['chnNr']+"+"+GroupsArray[i][1]['chnNr']); 
      
      // Kanalgruppen-elemente
      var sTrId = "" + deviceData['id'] + GroupsArray[i][0]['id'] +  GroupsArray[i][1]['id'];
      
      for(var x = 0; x < 2; x++) {
        arSubIds[arSubIds.length] = sTrId + (x+1);
        tr = $("tblNewDevices").insertRow(iInsIdx++);iElemsAdded++;
        tr.id = sTrId + (x+1);
        GroupsArray[i][x]['trid'] = tr.id;
        Element.setStyle(tr, {display: 'none'});
        td = Builder.node('td', {className: 'DeviceListCell_Invisible', colSpan:3}); tr.appendChild(td);
        td = Builder.node('td', {className: 'GrayBkg border1px'}, GroupsArray[i][x]['type']); tr.appendChild(td);
        td.innerHTML = GroupsArray[i][x]['type'];
        if (bShowPics) {
          td = Builder.node('td', {className: 'WhiteBkgPic border1px'}, [
            Builder.node('div', {id: 'picDiv' + GroupsArray[i][x]['id'], className: "CLASS04401",
              onmouseover:"picDivShow(jg_250, '"+deviceData['type']+"', 250, "+GroupsArray[i][x]['chnNr']+", this);", onmouseout:"picDivHide(jg_250);"})
          ]); 
        }
        else {
          td = Builder.node('td', {className: 'WhiteBkg border1px'});
        }
        Element.addClassName(td, "CLASS04402");
        tr.appendChild(td);
        td = Builder.node('td', {className: 'GrayBkg border1px'}, GroupsArray[i][x]['desc'] );
        td.innerHTML = translateKey(GroupsArray[i][x]['desc']);
        tr.appendChild(td);
        td = Builder.node('td', {className: 'GrayBkg border1px'}, strCut(GroupsArray[i][x]['sn'])); tr.appendChild(td);
        td = Builder.node('td', {className: 'GrayBkg border1px'}, GroupsArray[i][x]['iface']); tr.appendChild(td);
        var trsId = "trs" + GroupsArray[i][x]['id'];
        var s = "WhiteBkg border1px";
        var sClick = "";
        var sCur = "";
        if (GroupsArray[i][x]['transOp'] < 3) {
          s = "GrayBkg";
        }
        else {
          sClick = 'changeTransMode('+GroupsArray[i][x]['id']+ ',' + trsId + ')';
          sCur = " CLASS04404";
        }

        if (sClick != "") {
          td = Builder.node('td', {className: s}, 
            [Builder.node('div', {id: trsId, className: "CLASS04403" + sCur, onclick: sClick}, GroupsArray[i][x]['trans']) ]); 
        }
        else {
          td = Builder.node('td', {className: s}, chns[i]['trans']);
        }
        tr.appendChild(td);
          
        if (NAV_IE) {
          td = Builder.node('td', {className: 'WhiteBkg border1px'},
              [Builder.node('div', {id:'tdn' + GroupsArray[i][x]['id'], className: "CLASS04403 CLASS04404", onclick: 'textEdit(id, '+GroupsArray[i][x]['id']+', false, 0, CALL_STRCUT)'}, strCut(GroupsArray[i][x]['name'])) ]); tr.appendChild(td);
        }
        else {
          td = Builder.node('td', {className: 'WhiteBkg CLASS04403 border1px', id:'tdn' + GroupsArray[i][x]['id'], onclick: 'textEdit(id, '+GroupsArray[i][x]['id']+', false, 0, CALL_STRCUT)'}, strCut(GroupsArray[i][x]['name'])); tr.appendChild(td);
        } 
        
        if (NAV_IE) {
          var tdId = "func" + GroupsArray[i][x]['id'];
          td = Builder.node('td', {id: tdId, className: 'WhiteBkg border1px'},
            [Builder.node('div', {id: 'funcsDiv' + GroupsArray[i][x]['id'], className: "CLASS04403 CLASS04404", onclick: "showFuncOverlay(\'"+tdId+"\', \'"+GroupsArray[i][x]['id']+"\')"}, semCut(GroupsArray[i][x]['func'])) ]); tr.appendChild(td);
          var tdId = "room" + GroupsArray[i][x]['id'];
          td = Builder.node('td', {id: tdId, className: 'WhiteBkg border1px'},
            [Builder.node('div', {id: 'roomsDiv' + GroupsArray[i][x]['id'], className: "CLASS04403 CLASS04404", onclick: "showRoomOverlay(\'"+tdId+"\', \'"+GroupsArray[i][x]['id']+"\')"}, semCut(GroupsArray[i][x]['room'])) ]); tr.appendChild(td);
        }
        else {
          td = Builder.node('td', {id: 'funcsDiv' + GroupsArray[i][x]['id'], className: 'WhiteBkg CLASS04404 border1px', onclick: "showFuncOverlay(\'funcsDiv"+GroupsArray[i][x]['id']+"\', \'"+GroupsArray[i][x]['id']+"\')"}, semCut(GroupsArray[i][x]['func'])); tr.appendChild(td);
          td = Builder.node('td', {id: 'roomsDiv' + GroupsArray[i][x]['id'], className: 'WhiteBkg CLASS04404 border1px', onclick: "showRoomOverlay(\'roomsDiv"+GroupsArray[i][x]['id']+"\', \'"+GroupsArray[i][x]['id']+"\')"}, semCut(GroupsArray[i][x]['room'])); tr.appendChild(td);
        }
                
        td = Builder.node('td', {className: 'WhiteBkg border1px'}, '');

        writeTestField(td, GroupsArray[i][x]['id'].toString(),GroupsArray[i][x]['testtime'],GroupsArray[i][x]['comtestdp'],GroupsArray[i][x]['testrunning']);
        
        tr.appendChild(td);
        td = Builder.node('td', {className: 'WhiteBkg border1px'}, '');
        writeDeviceAction(td, true, false, false, GroupsArray[i][x]);
        tr.appendChild(td);
        td = Builder.node('td', {className: 'GrayBkg border1px'}, '');
        var sInpId = "inp" + GroupsArray[i][x]['id'];
        var input = Builder.node('input', {id: sInpId, type: 'checkbox', onclick: "iseChannels.setReadyConfig('"+sInpId+"',"+GroupsArray[i][x]['id']+")"});
        input.checked = GroupsArray[i][x]['ready'];
        td.appendChild(input);
        tr.appendChild(td);  
        
         // draw pic
        if (bShowPics) {
          var jg_0 = new jsGraphics('picDiv' + GroupsArray[i][x]['id']);
          InitGD(jg_0, 50);
          Draw(jg_0, deviceData['type'], 50, GroupsArray[i][x]['chnNr']);
        }
      }
    } 
    
    /**
    * When the expert mode is not active the virtual channels should not be visible in the post box
    * This function determines whether the virtual channels are visible or not.
    * param string chType: Might be 'DIMMER' or 'VIRTUAL_DIMMER', 'SWITCH' or 'VIRTUAL_SWITCH' and so on
    * return boolean 
    */
    var showVirtual = function(chType) {
      
      // this rega script determines whether the expert mode is active 
      <%
        object oUser = dom.GetObject( system.GetSessionVar('sessionUserID'));
        integer userID = oUser.ID();
        object user = dom.GetObject(userID);
        Write("var easyLinkMode = "#user.UserEasyLinkMode()#";");
      %>
  
      // Expert is active
      if (!easyLinkMode) {
        return "true"; // show all channels because the expert mode is active 
      } else {
        if (chType.split("_")[0] !== "VIRTUAL") {
          return "true"; //it´s not a virtual channel so show it
        }
      }
      return false; 
    };
     
    // Kanäle
    for (var i = 0; i < chns.length; i++) {
     
      //console.log("Channel hssType:   " +  chns[i]['hssType']);
    
      if (showVirtual(chns[i]['hssType']) && (chns[i]['vis'])) {

        arSubIds[arSubIds.length] = ""+ deviceData['id'] + chns[i]['id'];
        tr = $("tblNewDevices").insertRow(iInsIdx++);iElemsAdded++;
        tr.id = ""+ deviceData['id'] + chns[i]['id'];
        chns[i]['trid'] = tr.id;
        td = Builder.node('td', {className: 'DeviceListCell_Invisible', colSpan: 2}); tr.appendChild(td);
        td = Builder.node('td', {colSpan: 2, className: 'GrayBkg border1px'}, 'Ch. '+chns[i]['chnNr']); tr.appendChild(td);
        td.innerHTML = 'Ch.&nbsp;'+chns[i]['chnNr'];
        td = Builder.node('td', {className: 'WhiteBkg border1px'});
        if (bShowPics) {
          td = Builder.node('td', {className: 'WhiteBkgPic border1px'}, [
            Builder.node('div', {id: 'picDiv' + chns[i]['id'], className: "CLASS04405",
             onmouseover:"picDivShow(jg_250, '"+deviceData['type']+"', 250, "+chns[i]['chnNr']+", this);", onmouseout:"picDivHide(jg_250);"})
          ]); 
        }
        else {
         td = Builder.node('td', {className: 'WhiteBkg border1px'});
        }
        Element.addClassName(td, "CLASS04402");
        tr.appendChild(td);
       
        td = Builder.node('td', {className: 'GrayBkg border1px'}, chns[i]['desc']);
        td.innerHTML = translateKey(chns[i]['desc']);
        tr.appendChild(td);
        td = Builder.node('td', {className: 'GrayBkg border1px'}, strCut(chns[i]['sn'])); tr.appendChild(td);
        td = Builder.node('td', {className: 'GrayBkg border1px'}, chns[i]['iface']); tr.appendChild(td);
        var trsId = "trs" + chns[i]['id'];
        var s = "WhiteBkg border1px";
        var sClick = "";
        var sCur = "";
        if (chns[i]['transOp'] < 3) {
          s = "GrayBkg border1px";
        }
        else {
          sClick = 'changeTransMode('+chns[i]['id']+ ',' + trsId + ')';
          sCur = " CLASS04404";
        }
        if (sClick != "") {
          td = Builder.node('td', {className: s}, 
            //[Builder.node('div', {id: trsId, className: "CLASS04403" + sCur, onclick: sClick}, chns[i]['trans']) ]);
            [Builder.node('div', {id: trsId, className: "CLASS04403_", onclick: sClick}, chns[i]['trans']) ]);
        }
        else {
          td = Builder.node('td', {className: s}, chns[i]['trans']);
        }

        tr.appendChild(td);

        if (NAV_IE) {
          td = Builder.node('td', {className: 'WhiteBkg border1px'},
              [Builder.node('div', {id:'tdn' + chns[i]['id'], className: "CLASS04403 CLASS04404", onclick: 'textEdit(id, '+chns[i]['id']+', false, 0, CALL_STRCUT)'}, strCut(chns[i]['name'], true)) ]); tr.appendChild(td);
        }
        else {
         td = Builder.node('td', {className: 'WhiteBkg CLASS04404 border1px', id:'tdn' + chns[i]['id'], onclick: 'textEdit(id, '+chns[i]['id']+', false, 0, CALL_STRCUT)'}, strCut(chns[i]['name'], true)); tr.appendChild(td);
        }
        
        if (NAV_IE) {
          var tdId = "func" + chns[i]['id'];
          td = Builder.node('td', {id: tdId, className: 'WhiteBkg border1px'},
          [Builder.node('div', {id: 'funcsDiv' + chns[i]['id'], className: "CLASS04403 CLASS04404", onclick: "showFuncOverlay(\'"+tdId+"\', \'"+chns[i]['id']+"\')"}, semCut(chns[i]['func'])) ]); tr.appendChild(td);
          var tdId = "room" + chns[i]['id'];
          td = Builder.node('td', {id: tdId, className: 'WhiteBkg border1px'},
          [Builder.node('div', {id: 'roomsDiv' + chns[i]['id'], className: "CLASS04403 CLASS04404", onclick: "showRoomOverlay(\'"+tdId+"\', \'"+chns[i]['id']+"\')"}, semCut(chns[i]['room'])) ]); tr.appendChild(td);
        }
        else {
          td = Builder.node('td', {id: 'funcsDiv' + chns[i]['id'], className: 'WhiteBkg CLASS04404 border1px', onclick: "showFuncOverlay(\'funcsDiv"+chns[i]['id']+"\', \'"+chns[i]['id']+"\')"}, semCut(chns[i]['func'])); tr.appendChild(td);
          td = Builder.node('td', {id: 'roomsDiv' + chns[i]['id'], className: 'WhiteBkg CLASS04404 border1px', onclick: "showRoomOverlay(\'roomsDiv"+chns[i]['id']+"\', \'"+chns[i]['id']+"\')"}, semCut(chns[i]['room'])); tr.appendChild(td);
        }
      
        td = Builder.node('td', {className: 'WhiteBkg border1px'}, '');

        if (chns[i]['type'].match(/Team/g) == null ) {
          writeTestField(td, chns[i]['id'].toString(), chns[i]['testtime'], chns[i]['comtestdp'], chns[i]['testrunning']);
        }

        tr.appendChild(td);
        td = Builder.node('td', {className: 'WhiteBkg border1px'}, '');
        writeDeviceAction(td, true, false, false, chns[i]);
        tr.appendChild(td);
        td = Builder.node('td', {className: 'GrayBkg border1px'}, '');
        var sInpId = "inp" + chns[i]['id'];
        var input = Builder.node('input', {id: sInpId, type: 'checkbox', onclick: "iseChannels.setReadyConfig(this, "+chns[i]['id']+")"});
        input.checked = chns[i]['ready'];
        input._isReady = chns[i]['ready'];
        td.appendChild(input);
        tr.appendChild(td);  
      
        // draw pic
        var jg_0 = new jsGraphics('picDiv' + chns[i]['id']);
        InitGD(jg_0, 50);
        Draw(jg_0, deviceData['type'], 50, chns[i]['chnNr']);
      }
    }
  }
  arDevices[arIdx]['chnsgr'] = GroupsArray;
  arDevices[arIdx]['chns'] = chns;
  for (var i = arIdx +1; i < arDevPosis.length; i++) {
    arDevPosis[i] = arDevPosis[i] + iElemsAdded;
  }
  if ( <% Write(system.GetVar("bAutoExpGr"));%>) {
    if (arDevices[arIdx]['chnsgr']) {
      for (var i = 0; i < arDevices[arIdx]['chnsgr'].length; i++) {
        expandGroup(arDevices[arIdx]['id'],
                    arDevices[arIdx]['chnsgr'][i][0]['id'],
                    arDevices[arIdx]['chnsgr'][i][1]['id']);
      }
    }
  }
  bEIP = false;
  Cursor.set(Cursor.NORMAL);

</script>

<script type="text/javascript">
    translatePage("#tblNewDevices");
</script>