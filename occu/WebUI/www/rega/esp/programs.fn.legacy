function ::WriteConditionText()
{
  if( system.IsVar("oPrgID") )
  {
    object oPrgTmp = dom.GetObject( system.GetVar("oPrgID") );
    if( oPrgTmp )
    {
      object oRTmp = oPrgTmp.Rule();
      if( oRTmp )
      {
        object oCTmp = oRTmp.RuleCondition(0);
        if( oCTmp )
        {
          !integer iCCount = oCTmp.CndSingleCount();
          string sID;
          foreach(sID,system.GenerateEnum(0,0))
          {
            object oSC = oCTmp.CndSingleCondition(sID);
            if (oSC) 
 	          {
              integer iLV = oSC.LeftVal();
              integer iLVT = oSC.LeftValType();
              integer iRV1 = oSC.RightVal1();
              integer iRV1T = oSC.RightVal1ValType();
              integer iRV2 = oSC.RightVal2();
              integer iRV2T = oSC.RightVal2ValType();
              integer iCT1 = oSC.ConditionType();
              integer iCT2 = oSC.ConditionType2();
              integer iCC = oSC.ConditionChannel();
              if( iLVT == ivtEmpty ) { sRet = sRet#"?"; }
              !if( iLVT == ivtObjectId ) { sRet = sRet#"Kanalzustand:"; }
              if( iLVT == ivtObjectId ) { sRet = sRet#"${ruleDescrChannelState}"; }
              !if( iLVT == ivtSystemId ) { sRet = sRet#"Systemzustand:"; }
              if( iLVT == ivtSystemId ) { sRet = sRet#"${ruleDescrSystemState}"; }
              !if( iLVT == ivtCurrentDate ) { sRet = sRet#"Zeit:"; }
              if( iLVT == ivtCurrentDate ) { sRet = sRet#"${ruleDescrTime}"; }
              if( (iLVT == ivtObjectId) || (iLVT == ivtSystemId) )
              {
                object oCC = dom.GetObject( iCC );
                object oLV = dom.GetObject( iLV );
                boolean bOK = false;
                boolean bOptionList = ( (oLV.ValueType() == ivtInteger) && (oLV.ValueSubType() == istEnum) );
                boolean bBinary = ( oLV.ValueType() == ivtBinary );
                if( iLVT == ivtObjectId )
                {
                  bOK = ( oCC && oLV );
                  if( bOK )
                  {
                    sRet = sRet#" "#oCC.Name();
                  }
                  else
                  {
                    sRet = sRet#" (nicht ausgewählt)";
                  }
                }
                if( iLVT == ivtSystemId )
                {
                  if( oLV ) { bOK = true; }
                  if( bOK )
                  {
                    sRet = sRet#" "#oLV.Name();
                  }
                  else
                  {
                    sRet = sRet#" (nicht ausgewählt)";
                  }
                }
                if( bOK )
                {
                
                  boolean bSysVarGeneric = ( (iLVT == ivtSystemId) && (oLV.ValueType() == ivtFloat) && (oLV.ValueSubType() == istGeneric) );

                  if( !bSysVarGeneric )
                  {
                    !sRet = sRet#" bei";
                    sRet = sRet#" ${ruleConditionLblWhen}";
                  }

                  if( iLVT == ivtObjectId )
                  {
                    string sDP;
                    foreach( sDP, oCC.DPs().EnumEnabledVisibleIDs() )
                    {
                      object oDP = dom.GetObject( sDP );
                      if( oDP )
                      {
                        if( oDP.ID() == iLV)
                        {
                          if( (oDP.Operations() & (OPERATION_READ|OPERATION_EVENT)) != 0 )
                          {
                            integer iDPvt = oDP.ValueType();
                            integer iDPst = oDP.ValueSubType();
                            
                            if( (iDPvt == ivtInteger) && (iDPst == istEnum) )
                            {
                              integer iVLCount = web.webGetValueListCount( oDP.ValueList() );
                              iVLCount = iVLCount - 1;
                              string sVLKey;
                              foreach( sVLKey, system.GenerateEnum(0,iVLCount) )
                              {
                                if(sVLKey == iRV1)
                                {
                                  string sVLValue = web.webGetValueFromList( oDP.ValueList(), sVLKey );
                                  if( sVLValue.Length() )
                                  {
                                    if( (oDP.ID() == iLV) && (iRV1 == sVLKey) ) 
                                    { 
                                      string sValue = oDP.Name();
                                    }
                                    if( !oDP.IsTypeOf( OT_VARDP ) )
                                    {
                                      string sLongKey = oCC.ChnLabel()#"|"#oDP.HSSID()#"="#sVLValue;
                                      string sShortKey = oDP.HSSID()#"="#sVLValue;
                                      sValue = web.webKeyFromStringTable(sLongKey);
                                      if( !sValue.Length() )
                                      {
                                        string sValue = web.webKeyFromStringTable(sShortKey);
                                        if( !sValue.Length() )
                                        {
                                          sValue = sShortKey;
                                        }
                                      }
                                    }
                                    !Write( "<script>conInfo('- ist Integer und Enum -- sDP:"#sDP#" "#sVLKey#" "#iRV1#"');</script>" );
                                    sRet = sRet#' '#sValue;
                                  }
                                }
                              }
                            }
                            else
                            {
                              if( (iDPvt == ivtBinary) && ((iDPst != istAction)) )
                              {
                                if( (oDP.ID() == iLV) && (iRV1 == true) ) 
                                { 
                                  string sValue = oDP.Name()#": "#oDP.ValueName1();
                                  if( (!oDP.IsTypeOf( OT_VARDP )) && (!oDP.IsTypeOf( OT_ALARMDP )) )
                                  {
                                    string sLongKey = oCC.ChnLabel()#"|"#oDP.HSSID()#"=TRUE";
                                    string sShortKey = oDP.HSSID()#"=TRUE";
                                    sValue = web.webKeyFromStringTable(sLongKey);
                                    if( sValue.Length() == 0 )
                                    {
                                      string sValue = web.webKeyFromStringTable(sShortKey);
                                      if( !sValue.Length() )
                                      {
                                        sValue = sShortKey;
                                      }
                                    }
                                  }
                                  sRet = sRet#' '#sValue;
                                }
                                if( (oDP.ID() == iLV) && (iRV1 == false) ) 
                                { 
                                  string sValue = oDP.Name()#": "#oDP.ValueName0();
                                  if( (!oDP.IsTypeOf( OT_VARDP )) && (!oDP.IsTypeOf( OT_ALARMDP )) )
                                  {
                                    string sLongKey = oCC.ChnLabel()#"|"#oDP.HSSID()#"=FALSE";
                                    string sShortKey = oDP.HSSID()#"=FALSE";
                                    sValue = web.webKeyFromStringTable(sLongKey);
                                    if( sValue.Length() == 0 )
                                    {
                                      string sValue = web.webKeyFromStringTable(sShortKey);
                                      if( !sValue.Length() )
                                      {
                                        sValue = sShortKey;
                                      }
                                    }
                                  }
                                  sRet = sRet#' '#sValue;
                                }
                                !Write( "<script>conInfo('- ist binär und Action, RV1="#iRV1#" -- RV2="#iRV2#"');</script>" );
                              }
                              else
                              {
                                if (iRV1T != ivtSpecialValue)
                                {
                                  if( oDP.ID() == iLV ) 
                                  { 
                                    string sValue = oDP.Name();
                                  }
                                  if( (!oDP.IsTypeOf( OT_VARDP )) && (!oDP.IsTypeOf( OT_ALARMDP )) )
                                  {
                                    string sLongKey = oCC.ChnLabel()#"|"#oDP.HSSID();
                                    string sShortKey = oDP.HSSID();
                                    sValue = web.webKeyFromStringTable(sLongKey);
                                    if( !sValue.Length() )
                                    {
                                      string sValue = web.webKeyFromStringTable(sShortKey);
                                      if( !sValue.Length() )
                                      {
                                        sValue = sShortKey;
                                      }
                                    }
                                  }
                                  !Write( "<script>conInfo('- ist was anderes -- sDP:"#sDP#" Typ:"#iRV1T#" ');</script>" );
                                  sRet = sRet#' '#sValue;
                                }
                              }
                            }
                          }
                          if( oDP.IsTypeOf(OT_HSSDP) )
                          {
                            string s;
                            foreach( s, oDP.EnumSpecialIDs() )
                            {
                              if( s )
                              {
                                if( (oDP.ID() == iLV) && (s == iRV1.ToString()) && (iRV1T == ivtSpecialValue) ) 
                                { 
                                  string sValue = oDP.Name();  
                                  string sLongKey = oCC.ChnLabel()#"|"#oDP.HSSID()#"="#s;
                                  string sShortKey = oDP.HSSID()#"="#s;
                                  string sValue = web.webKeyFromStringTable(sLongKey);
                                  if( !sValue.Length() )
                                  {
                                    string sValue = web.webKeyFromStringTable(sShortKey);
                                    if( !sValue.Length() )
                                    {
                                      sValue = sShortKey;
                                    }
                                  }
                                  !Write( "<script>conInfo('- ist HSSDP -- "#ivtSpecialValue#" -- "#sValue#"');</script>" );
                                  sRet = sRet#' '#sValue;  
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }        
                  
                  !--------------------------right Value---------------------                
                  boolean bSpecial = (iRV1T==ivtSpecialValue);
                  if( (!bOptionList) && (!bBinary) && (!bSpecial) )
                  {
                    !sRet = sRet#' <i>im Wertebereich</i> ';
                    sRet = sRet#' <i>${ruleConditionLblWithinValueRange}</i> ';
                    string sCT = "";
                    string sValueUnit = oLV.ValueUnit();
                    if( sValueUnit == "100%")
                    {
                      sValueUnit = "%";
                      iRV1 = iRV1*100;
                      iRV2 = iRV2*100;
                    }
                    
                    if( sValueUnit == "°C" )
                    {
                      sValueUnit = "° C";
                    }
                    else
                    {
                      sValueUnit = " "#sValueUnit;
                    }
                    
                    if( sValueUnit == " " )
                    {
                      sValueUnit = "";
                    }
                    
                    if( (iCT1 != 6) && (iCT1 != 8) && (iCT1 != 10) & (iCT1 != 11) & (iCT1 != 9) )
                    {
                      oSC.ConditionType(6);
                      iCT1 = 6;
                    }
                    
                    !if( iCT1 == 6 ) { sCT = "von "#iRV1.ToString(2)#sValueUnit#" bis kleiner "#iRV2.ToString(2)#sValueUnit; }
                    if( iCT1 == 6 ) { sCT = "${ruleConditionLblRangeFrom} "#iRV1.ToString(2)#sValueUnit#" ${ruleConditionLblRangeLessThan} "#iRV2.ToString(2)#sValueUnit; }
                    !if( iCT1 == 8 ) { sCT = "größer als "#iRV1.ToString(2)#sValueUnit; }
                    if( iCT1 == 8 ) { sCT = "${ruleConditionLblGreaterThan} "#iRV1.ToString(2)#sValueUnit; }
                    !if( iCT1 == 10 ) { sCT = "kleiner als "#iRV1.ToString(2)#sValueUnit; }
                    if( iCT1 == 10 ) { sCT = "${ruleConditionLblLessThan} "#iRV1.ToString(2)#sValueUnit; }
                    !if( iCT1 == 9 ) { sCT = "größer oder gleich "#iRV1.ToString(2)#sValueUnit; }
                    if( iCT1 == 9 ) { sCT = "${ruleConditionLblGreaterOrEqualThan} "#iRV1.ToString(2)#sValueUnit; }
                    !if( iCT1 == 11 ) { sCT = "kleiner oder gleich "#iRV1.ToString(2)#sValueUnit; }
                    if( iCT1 == 11 ) { sCT = "${ruleConditionLblLessOrEqualThan} "#iRV1.ToString(2)#sValueUnit; }
                    sRet = sRet#' '#sCT;
                  }
                  boolean bAction = ( oLV.ValueSubType() == istAction );
                  if( !bAction )
                  {
                    if( (iCT2 != 15) && (oSC.ConditionType2() != 13) && (oSC.ConditionType2() != 4) )
                    {
                      oSC.ConditionType2(4);
                    }
                    !if( iCT2 == 13 ) {sCT = 'auslösen auf Aktualisierung';}
                    if( iCT2 == 13 ) {sCT = '${ruleConditionSelectTriggerWhenUpdated}';}
                    !if( iCT2 == 15 ) {sCT = 'nur prüfen';}
                    if( iCT2 == 15 ) {sCT = '${ruleConditionSelectCheckOnly}';}
                    !if( iCT2 == 4 ) {sCT = 'auslösen auf Änderung';}
                    if( iCT2 == 4 ) {sCT = '${ruleConditionSelectWhenChanged}';}
                    sRet = sRet#' '#sCT;
                  }
                }
              }
              
              !--------------------------SysVar---------------------
              if( (iLVT == ivtSystemId) || (iLVT == 19) )
              {        
                if( bOptionList )
                {
                  !Write( "<script>conInfo('- bOptionList ');</script>" );
                  integer iVLCount = web.webGetValueListCount( oLV.ValueList() );
                  sRet = sRet#' '#iVLCount;
                  iVLCount = iVLCount - 1;
                  string sVLKey;
                  foreach( sVLKey, system.GenerateEnum(0,iVLCount) )
                  {
                    string sVLValue = web.webGetValueFromList( oLV.ValueList(), sVLKey );
                    sRet = sRet#' '#sVLValue;
                  }
                }
                if( bBinary )
                {
                  if( iRV1 == 0 ) 
                  {
                    sRet = sRet#' '#oLV.ValueName0();
                  }
                  if( iRV1 == 1 ) 
                  {
                    sRet = sRet#' '#oLV.ValueName1();
                  }
                }
              }
              if( iLVT == ivtCurrentDate )
              {
                !Write( "<script>conInfo('- aktuelles Datum')</script>" );
                if( (iRV1T == ivtObjectId) && (iRV1 > 0) )
                {
                  integer tmid = iRV1;
                  string sTm = "";
                  Call("/esp/system.fn::TmToString()");
                  sRet = sRet#' '#sTm;                
                  if( (iCT2 != 15) && (oSC.ConditionType2() != 13) )
                  {
                    oSC.ConditionType2(13);
                  }
                  !if( iCT2 == 13 ) {sRet = sRet#' auslösen zu Zeitpunkten';}
                  if( iCT2 == 13 ) {sRet = sRet#' ${ruleConditionSelectTriggerOnTime}';}
                  !if( iCT2 == 15 ) {sRet = sRet#' nur prüfen';}
                  if( iCT2 == 15 ) {sRet = sRet#' ${ruleConditionSelectCheckOnly}';}
                }
                else
                {
                  sRet = sRet;
                }
              }
            }
            else
            {
              !sRet = sRet#"Keine Bedingungen";
              sRet = sRet#"${ruleDescrNoCondition}";
            }
          }
        }
      }
    }
  }
  return;
}

function ::WriteDestinationText()
{
  if( system.IsVar("oPrgID") )
  {
    object oPrgTmp = dom.GetObject( system.GetVar("oPrgID") );
    if( oPrgTmp )
    {
      object oRTmp = oPrgTmp.Rule();
      if( oRTmp )
      {
        object oDTmp = oRTmp.RuleDestination();
        if( oDTmp )
        {
          object oSD = oDTmp.DestSingleDestination(0);
          if( oSD )
          {
            integer iDP = oSD.DestinationDP();
            integer iCH = oSD.DestinationChannel();
            integer iP = oSD.DestinationParam();
            integer iV = oSD.DestinationValue();
            integer iVT = oSD.DestinationValueType();
            integer iVP = oSD.DestinationValueParam();
            integer iVPT = oSD.DestinationValueParamType();

            !if( iP == ivtObjectId ) { sRet = sRet#"Kanalauswahl: "; }
            if( iP == ivtObjectId ) { sRet = sRet#"${ruleDescrChannel} "; }
            !if( iP == ivtSystemId ) { sRet = sRet#"Systemzustand: " ; }
            if( iP == ivtSystemId ) { sRet = sRet#"${ruleDescrSystemState} " ; }
            !if( iP == ivtString ) { sRet = sRet#"Skript: " ; }
            if( iP == ivtString ) { sRet = sRet#"${ruleDescrScript} " ; }
            if( (iP == ivtObjectId) || ( iP == ivtSystemId ) )
            {
              if( iP == ivtObjectId )
              {
                object oCH = dom.GetObject( iCH );
                if( oCH )
                {
                  sRet = sRet#oCH.Name();
                }
              }
              if( iP == ivtSystemId )
              {
                object oDP = dom.GetObject( iDP );
                if( oDP )
                {
                  sRet = sRet#oDP.Name();
                }
              }
            }
            if( iP == ivtString )
            {
              sRet = sRet # "...";
            }
            if( ( iP == ivtString ) || ( iP == ivtObjectId ) || ( iP == ivtSystemId ) )
            {
              if( iVPT == ivtDelay )
              {
                !sRet = sRet#" verzögert um " ;
                sRet = sRet#" ${ruleActivitySelectDelayed} " ;
                integer iHours = iVP.ToString().Substr(11,2).ToInteger();
                integer iMinutes = iVP.ToString().Substr(14,2).ToInteger();
                integer iSeconds = iVP.ToString().Substr(17,2).ToInteger();
                integer iVal = 0;
                if( iSeconds > 0 ) { iVal = iSeconds + (iMinutes*60) + (iHours*3600); iMinutes = 0; iHours = 0; }
                if( iMinutes > 0 ) { iVal = iMinutes + (iHours*60); iHours = 0; }
                if( iHours > 0 ) { iVal = iHours; }
                sRet = sRet#iVal ;
                !if( iSeconds > 0 ) { sRet = sRet#" Sekunden "; }
                if((iMinutes == 0) && (iHours == 0) && (iSeconds >= 0) ) { sRet = sRet#" ${ruleActivitySelectSeconds} "; }
                !if( iMinutes > 0 ) { sRet = sRet#" Minuten "; }
                if( iMinutes > 0 ) { sRet = sRet#" ${ruleActivitySelectMinutes} "; }
                !if( iHours > 0 )   { sRet = sRet#" Stunden "; }
                if( iHours > 0 )   { sRet = sRet#" ${ruleActivitySelectHours} "; }
              }
              else
              {
                !sRet = sRet#" sofort ";
                sRet = sRet#" ${ruleActivitySelectImmediately} ";
              }
              ! ##############################################################################
              if( iP == ivtString )
              {
                !sRet = sRet#" ausführen";
                sRet = sRet#" ${ruleDescrPerform}";
              }
              if( iP == ivtObjectId )
              {
                object oDP = dom.GetObject( iDP );

                if( oDP )
                {
                  object oCH = dom.GetObject( oDP.Channel() );
                  if( oCH )
                  { 
                    integer iDPvt = oDP.ValueType();
                    integer iDPst = oDP.ValueSubType();
                    string sKey = oCH.ChnLabel()#"|"#oDP.HSSID();
                    boolean showVal = true;

                    if( (iDPvt == ivtInteger) && (iDPst == istEnum) )
                    {
                      ! sRet = sRet#web.webGetValueFromList( oDP.ValueList(), iV );
                      string webKey = sKey#"="#web.webGetValueFromList( oDP.ValueList(), iV );
                      sRet = sRet#web.webKeyFromStringTable( webKey );
                      showVal = false;
                    }
                    else
                    {
                      if( (iDPvt == ivtBinary) && (iDPst != istAction) )
                      {
                        if( iV == 0 )
                        {
                          string sKey = oCH.ChnLabel()#"|"#oDP.HSSID()#"=FALSE";
                          string sValue = web.webKeyFromStringTable(sKey);
                          if( sValue.Length() == 0 )
                          {
                            sKey = oDP.HSSID()#"=FALSE";
                            string sValue = web.webKeyFromStringTable(sKey);
                            if( !sValue.Length() )
                            {
                              sValue = sKey;
                            }
                          }
                          sRet = sRet#sValue;
                        }
                        if( iV == 1 )
                        {
                          string sKey = oCH.ChnLabel()#"|"#oDP.HSSID()#"=TRUE";
                          string sValue = web.webKeyFromStringTable(sKey);
                          if( sValue.Length() == 0 )
                          {
                            sKey = oDP.HSSID()#"=TRUE";
                            string sValue = web.webKeyFromStringTable(sKey);
                            if( !sValue.Length() )
                            {
                              sValue = sKey;
                            }
                          }
                          sRet = sRet#sValue;
                        }
                      }
                      else
                      {
                        string sKey = oCH.ChnLabel()#"|"#oDP.HSSID();
                        string sValue = web.webKeyFromStringTable(sKey);
                        sRet = sRet#sValue;
                        if( sValue.Length() == 0 )
                        {
                          sKey = oDP.HSSID();
                          string sValue = web.webKeyFromStringTable(sKey);
                          if( !sValue.Length() )
                          {
                            sValue = sKey;
                          }
                          sRet = sRet#sValue;
                        }
                      }
                    }
                    if( (iVT == ivtObjectId) || (iVT == ivtSystemId) )
                    {
                      !sRet=sRet#" auf";
                      sRet=sRet#" ${ruleDescrSetValueA}";
                      object otmpDP = dom.GetObject(iV);
                      if( otmpDP )
                      {
                        if( iVT == ivtObjectId )
                        {
                          object otmpCH = dom.GetObject( otmpDP.Channel() );
                          if( otmpCH )
                          {
                            sRet=sRet#" "#otmpCH.Name();
                          }
                          else
                          {
                            sRet=sRet#" "#otmpDP.Name();
                          }
                        }
                        if( iVT == ivtSystemId )
                        {
                          sRet=sRet#" "#otmpDP.Name();
                        }
                      }
                    }
                    else
                    {
                      if( (oDP.ValueType() != ivtBinary) && (oDP.ValueSubType() != istAction) && (showVal == true) )
                      {
                        !sRet=sRet#" auf ";
                        sRet=sRet#" ${ruleDescrSetValueA} ";
                        var value = iV;

                        ! TWIST-406
                        if( value < oDP.ValueMin() ) { value = oDP.ValueMin().ToFloat().ToString(2); }

                        var unit = oDP.ValueUnit();
                        if( unit == "100%")
                        {
                          value = value * 100;
                          unit = "%";
                        }
                        if( unit == "degree" )
                        {
                          unit = "&deg;";
                        }

                        !uebersetzen von special_values z. B. beim HM-CC-TC VENT_OPEN bzw. VENT_CLOSED 
                        sValue = web.webKeyFromStringTable(value.ToString(0));

                        if( sValue != "")
                        {
                          sRet=sRet#sValue;
                        }
                        else
                        {
                          ! TWIST-406
                          if (unit == "&#176;C") {
                            sRet=sRet#value.ToString(2);
                          } else {
                           if ( (value.ToString().Find("0x02") != -1) || (value.ToString().Find("ACT_") != -1) ) {
                              ! This is because the value of the status display or the RGBW-Controller can be very long
                              sRet=sRet#" ${ruleDescrHexString}";
                            } else {
                              sRet=sRet#value.ToString(2);
                            }
                          }
                        }
                        
                        if( unit.Length() && sValue == "" )
                        {
                          sRet=sRet#" "#unit;
                        }
                      }
                    }
                  }
                }
              }
              if( iP == ivtSystemId )
              {
                object oDP = dom.GetObject( iDP );
                if( oDP )
                {
                  if( iVT == ivtObjectId )
                  {
                    sRet=sRet#" ";
                  }
                  else
                  {
                    !sRet=sRet#" auf ";
                    sRet=sRet#" ${ruleDescrSetValueA} ";
                    string stmpValue = "";
                    if( oDP.ValueSubType() == istBool )
                    {
                      if( iV == 0 )
                      {
                        sRet=sRet#" "#oDP.ValueName0();
                      }
                      else
                      {
                        sRet=sRet#" "#oDP.ValueName1();
                      }
                    }
                    if( oDP.ValueSubType() == istEnum )
                    {
                      sRet=sRet#" "#web.webGetValueFromList(oDP.ValueList(),iV);
                    }
                    if( oDP.ValueSubType() == istAlarm )
                    {
                      if( iV == 0 )
                      {
                        sRet=sRet#" "#oDP.ValueName0();
                      }
                      else
                      {
                        sRet=sRet#" "#oDP.ValueName1();
                      }
                    }
                    if( oDP.ValueSubType() == istGeneric )
                    {
                      if (iV < 1 && oDP.ValueUnit() == "%") {
                        iV = iV * 100;
                      }
                      sRet=sRet#" "#iV.ToString(2)#" "#oDP.ValueUnit();

                    }
                    if (oDP.ValueSubType() == istChar8859)
                    {
                     sRet = sRet # " " # iV.ToString(2);
                    }
                  }
                }
                !sRet = sRet#" setzen";
                sRet=sRet#" ${ruleDescrSetValueB}";
              }
              ! ##############################################################################
            }
          }
          
        }
        else
        {
          !sRet = sRet#"Keine Aktivitäten";
          sRet = sRet#"${ruleDescrNoActivities}";
        }
      }
    }
  }
  return;
}


function ::SetBreakOnRestart()
{
  if( system.IsVar("id") )
  {
    object oTmp = dom.GetObject( system.GetVar("id") );
    if( oTmp )
    {
      if( system.GetVar("value") == "true" )
      {
        Write( oTmp.BreakOnRestart( true ) );
      }
      else
      {
        Write( oTmp.BreakOnRestart( false ) );
      }
    }
  }
  return;
}

function ::SetActive()
{
  if( system.IsVar("id") )
  {
    object oTmp = dom.GetObject( system.GetVar("id") );
    if( oTmp )
    {
      if( system.GetVar("value") == "true" )
      {
        Write( oTmp.Active( true ) );
      }
      else
      {
        Write( oTmp.Active( false ) );
      }
    }
  }
  return;
}

function ::SetVisible()
{
  if( system.IsVar("id") )
  {
    object oTmp = dom.GetObject( system.GetVar("id") );
    if( oTmp )
    {
      if( system.GetVar("value") == "true" )
      {
        Write( oTmp.Visible( true ) );
      }
      else
      {
        Write( oTmp.Visible( false ) );
      }
    }
  }
  return;
}

function ::SetOperate()
{
  if( system.IsVar("id") )
  {
    object oTmp = dom.GetObject( system.GetVar("id") );
    if( oTmp )
    {
      Write( oTmp.UserAccessRights(iulOtherThanAdmin) );
      if( system.GetVar("value") == "true" )
      {
        Write( oTmp.UserAccessRights(iulOtherThanAdmin,iarFullAccess) );
      }
      else
      {
        Write( oTmp.UserAccessRights(iulOtherThanAdmin,iarRead) );
      }
    }
  }
  return;
}

function ::ProgramUpdate()
{
  if( system.IsVar("id") )
  {
    object oTmp = dom.GetObject( system.GetVar("id") );
    if( oTmp )
    {
      Write( oTmp.ProgramUpdate() );
    }
  }
  return;
}

function ::LoadProgramListXML()
{
  WriteLine( '<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>' );
  object oPrograms = dom.GetObject( ID_PROGRAMS );
  if(oPrograms)
  {
    WriteLine( '<programs>' );
    string sPID;
    foreach( sPID, oPrograms.EnumIDs() )
    {
      object o = dom.GetObject( sPID );
      if( o )
      {
        WriteLine( '<program id="'#o.ID()#'" name="'#o.Name()#'" />' );
      }
    }
    WriteLine( '</programs>' );
  }
  return;
}

function ::SetVisibility()
{
  if( system.IsVar("id") && system.IsVar("value") )
  {
    object oTmp = dom.GetObject( system.GetVar("id") );
    if( oTmp )
    {
      if( system.GetVar("value") == "true" ) { oTmp.Internal( true ); }
      if( system.GetVar("value") == "false" ) { oTmp.Internal( false ); }
      Write( oTmp.Internal() );
    }
  }
  return;
}

function ::DeleteProgram()
{
  if( system.IsVar("id") )
  {
    object oTmp = dom.GetObject( system.GetVar("id") );
    if( oTmp )
    {
      if( !oTmp.Unerasable() )
      {
        Write( dom.DeleteObject( oTmp.ID() ) );
      }
    }
  }
  return;
}

function ::RestoreProgram()
{
  if( system.IsVar("orig") && system.IsVar("copy") )
  {
    object oCopy = dom.GetObject( system.GetVar("copy") );
    object oOrig = dom.GetObject( system.GetVar("orig") );
    if( oCopy && oOrig )
    {
      if( system.GetVar("copy") != system.GetVar("orig") )
      {
        oCopy.ProgramCopyTo( oOrig.ID() );
        dom.DeleteObject( oCopy.ID() );
        oOrig.ProgramCopyID( ID_ERROR );        
        Write( oOrig.Name() );
      }
      oOrig.ProgramUpdate();
      oOrig.Active(true);
    }
  }
  return;
}

function ::CopyToNewProgram()
{
  if( system.IsVar("id") )
  {
    object oCopy = dom.GetObject( system.GetVar("id") );
    if( oCopy )
    {
      oCopy.ProgramCopyID(ID_ERROR);
      string sUniqueName;
      dom.CheckName(oCopy.Name(), &sUniqueName, oCopy.ID() );
      oCopy.Name( sUniqueName );
      Write( oCopy.ProgramUpdate() );
      oCopy.Active(true);
    }
  }
  return;
}

function ::SetProgram()
{
  boolean bRet = false;
  if( system.IsVar("id") )
  {
    object oTmp = dom.GetObject( system.GetVar("id") );
    if( oTmp )
    {
      object oCopyTmp = oTmp.ProgramCopyTo();
      if( oCopyTmp )
      {
        string sTmp = "";
        oCopyTmp.Name( oTmp.Name(), &sTmp, oTmp.ID() );
        boolean bF1 = system.SetSessionVar("sessionPRGID", oCopyTmp.ID());
        boolean bF2 = system.SetSessionVar("sessionORIGPRGID", oTmp.ID());
        if( bF1 && bF2 ) { bRet = true; }
      }
    }
  }
  Write( bRet );
  return;
}

function ::NewProgram()
{
  object oPTmp = dom.GetObject( ID_PROGRAMS );
  object oTmp = dom.CreateObject( OT_PROGRAM );
  boolean bRet = false;
  if( oTmp )
  {
    !oTmp.Name( "Neues Programm" );
    oTmp.Name( "${ruleTmpProgramName}" );
    boolean bF1 = oPTmp.Add( oTmp.ID() );
    boolean bF2 = system.SetSessionVar("sessionPRGID", oTmp.ID());
    boolean bF3 = system.SetSessionVar("sessionORIGPRGID", oTmp.ID());
    if( bF1 && bF2 && bF3 ) { bRet = true; }
  }
  Write( bRet );
  return;
}

function ::LoadRule()
{
  if( system.IsVar("pid") && system.IsVar("rid") )
  {
    object oR = dom.GetObject( system.GetVar("rid") );
    if( oR )
    {
      object oSR = oR.RuleSubRule();
      if( oSR )
      {
        Write( "false|"#oSR.ID() );
      }
      else
      {
        Write( "true" );
      }
      Write("|");
      string id = oR.ID();
      #inc("/esp/rule.inc");
    }
    else
    {
      Write( "error" );
    }
  }
  return;
}

function ::ReloadRule()
{
  if( system.IsVar("rid") )
  {
    object oR = dom.GetObject( system.GetVar("rid") );
    if( oR )
    {
      object oSR = oR.RuleSubRule();
      string id = oR.ID();
      string pid = "0";
      object oPTmp = dom.GetObject( oR.RuleParentID() );
      if( oPTmp )
      {
        if( oPTmp.IsTypeOf( OT_PROGRAM ) )
        {
          pid = oPTmp.ID().ToString();
        }
      }
      #inc("/esp/rule.inc");
    }
  }
  return;
}

function ::AddCondition()
{
  if( system.IsVar("rid") )
  {
    object oTmp = dom.GetObject( system.GetVar("rid") );
    if( oTmp )
    {
      object oCTmp = oTmp.RuleAddCondition();
      if( oCTmp )
      {
        if( oTmp.RuleConditions().Count() > 1 )
        {
          oCTmp.CndOperatorType( oTmp.RuleCondition(0).CndOperatorType() );
        }
        else
        {
          oCTmp.CndOperatorType( 2 );
        }
        object oSCTmp = oCTmp.CndAddSingle();
        if( oSCTmp )
        {
          if( oCTmp.CndOperatorType( ) == 1 )
          {
            oSCTmp.OperatorType( 2 );
          }
          else
          {
            oSCTmp.OperatorType( 1 );
          }
        }
      }
    }
  }
}

function ::DeleteCondition()
{
  if( system.IsVar("rid") && system.IsVar("cid") )
  {
    object oTmp = dom.GetObject( system.GetVar("rid") );
    if( oTmp )
    {
      Write( oTmp.RuleDelCondition( system.GetVar("cid") ) );
    }
  }
}

function ::AddSingleCondition()
{
  if( system.IsVar("cid") )
  {
    object oTmp = dom.GetObject( system.GetVar("cid") );
    if( oTmp )
    {
      object oSCTmp = oTmp.CndAddSingle();
      if( oSCTmp )
      {
        if( oTmp.CndSingleCount() > 1 )
        {
          oSCTmp.OperatorType( oTmp.CndSingleCondition(0).OperatorType() );
        }
        else
        {
          if( oTmp.CndOperatorType() == 1 )
          {
            oSCTmp.OperatorType( 2 );
          }
          else
          {
            oSCTmp.OperatorType( 1 );
          }
        }
      }
    }
  }
}

function ::DeleteSingleCondition()
{
  if( system.IsVar("cid") && system.IsVar("sid") )
  {
    object oTmp = dom.GetObject( system.GetVar("cid") );
    if( oTmp )
    {
      Write( oTmp.CndDelSingle( system.GetVar("sid") ) );
      if( oTmp.CndSingleCount() < 1 )
      {
        if( system.IsVar("rid") )
        {
          object oRTmp = dom.GetObject( system.GetVar("rid") );
          if( oRTmp )
          {
            oRTmp.RuleDelCondition( oTmp.ID() );
          }
        }
      }
    }
  }
}

function ::AddSingleDestination()
{
  if( system.IsVar("did") )
  {
    object oTmp = dom.GetObject( system.GetVar("did") );
    if( oTmp )
    {
      Write( oTmp.DestAddSingle() );
    }
  }
}

function ::DeleteSingleDestination()
{
  if( system.IsVar("did") && system.IsVar("sid") )
  {
    object oTmp = dom.GetObject( system.GetVar("did") );
    if( oTmp )
    {
      Write( oTmp.DestDelSingle( system.GetVar("sid") ) );
    }
  }
}

function ::AddSubRule()
{
  if( system.IsVar("rid") )
  {
    object oTmp = dom.GetObject( system.GetVar("rid") );
    if( oTmp )
    {
      Write( oTmp.RuleCreateSubRule() );
    }
  }
}

function ::AddSubRuleDest()
{
  if( system.IsVar("rid") )
  {
    object oTmp = dom.GetObject( system.GetVar("rid") );
    if( oTmp )
    {
      oTmp.ElseIfFlag( true );
      object oRuleTmp = oTmp.RuleSubRule();
      if( !oRuleTmp )
      {
        Write( "SubRule does not exist. Now creating..." );
        oRuleTmp = oTmp.RuleCreateSubRule();
        Write( oTmp.Name() );
      }
      Write( oRuleTmp.RuleDestination().DestAddSingle() );
    }
  }
}

function ::AddSubRuleBOR()
{
  if( system.IsVar("rid") )
  {
    object oTmp = dom.GetObject( system.GetVar("rid") );
    if( oTmp )
    {
      oTmp.ElseIfFlag( true );
      object oRuleTmp = oTmp.RuleSubRule();
      if( !oRuleTmp )
      {
        oRuleTmp = oTmp.RuleCreateSubRule();
      }
      Write( oRuleTmp.RuleDestination().BreakOnRestart( true ) );
    }
  }
}

function ::AddNewElseRule()
{
  if( system.IsVar("rid") )
  {
    object oTmp = dom.GetObject( system.GetVar("rid") );
    if( oTmp )
    {
      if( oTmp.ElseIfFlag() )
      {
        object oRuleTmp = oTmp.RuleSubRule();
        if( !oRuleTmp )
        {
          oRuleTmp = oTmp.RuleCreateSubRule();
          oRuleTmp.ElseIfFlag( true );
        }
      }
      else
      {
        oTmp.ElseIfFlag(true);
      }      
      Write( oRuleTmp.RuleDestination() );
    }
  }
}

function ::DeleteSubRule()
{
  if( system.IsVar("rid") )
  {
    object oTmp = dom.GetObject( system.GetVar("rid") );
    if( oTmp )
    {
      Write( oTmp.RuleDelSubRule() );
    }
  }
}

function ::SetOperatorType()
{
  if( system.IsVar("id") && system.IsVar("value") )
  {
    object oTmp = dom.GetObject( system.GetVar("id") );
    if( oTmp )
    {
      Write( oTmp.CndOperatorType( system.GetVar("value") ) );
      if( oTmp.CndSingleCount() == 1 )
      {
        if( oTmp.CndOperatorType() == 1 )
        {
          oTmp.CndSingleCondition(0).OperatorType( 2 );
        }
        else
        {
          oTmp.CndSingleCondition(0).OperatorType( 1 );
        }
      }
    }
  }
}

function ::ShowNonVisiblePrograms()
{
  if( system.IsSessionVar("sessionSNVPRG") )
  {
    string sEnable = system.GetSessionVar("sessionSNVPRG");
    if( sEnable == "1" )
    {
      system.SetSessionVar("sessionSNVPRG","0");
    }
    else
    {
      system.SetSessionVar("sessionSNVPRG","1");
    }
  }
  else
  {
    system.SetSessionVar("sessionSNVPRG","1");
  }
}
