system.describe {
  LEVEL NONE
  SCRIPT_FILE system/describe.tcl
  INFO {Liefert eine detailierte Beschreibung der HomeMatic JSON API.}
  ARGUMENTS {}
}

system.listMethods {
  LEVEL NONE
  SCRIPT_FILE system/listmethods.tcl
  INFO {Liefert eine Liste der verfügbaren Methoden}
  ARGUMENTS {}
}

system.methodHelp {
  LEVEL NONE
  SCRIPT_FILE system/methodhelp.tcl
  INFO  {Liefert die Kurzbeschreibung einer Methode}
  ARGUMENTS {name}
}
system.saveObjectModel {
  LEVEL NONE
  SCRIPT_FILE system/saveobjectmodel.tcl
  INFO  {Speichert das Object Model}
  ARGUMENTS {}
}

system.getEnergyPrice {
  LEVEL NONE
  SCRIPT_FILE system/getenergyprice.tcl
  INFO  {Ermittelt den Preis einer KW/h}
  ARGUMENTS {}
}

Interface.activateLinkParamset {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE  interface/activatelinkparamset.tcl
  INFO {Aktiviert ein Link-Parameterset}
  ARGUMENTS {_session_id_ interface address peerAddress longPress}
}

Interface.addDevice {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/adddevice.tcl
  INFO {Lernt ein Gerät anhand seiner Seriennummer an}
  ARGUMENTS {_session_id_ interface serialNumber}
}

Interface.addLink {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/addlink.tcl
  INFO {Erstellt eine direkte Verknüpfung}
  ARGUMENTS {_session_id_ interface sender receiver name description}
}

Interface.changeKey {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/changekey.tcl
  INFO {Ändert den AES-Schlüssel}
  ARGUMENTS {_session_id_ interface passphrase}
}

Interface.clearConfigCache {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/clearconfigcache.tcl
  INFO {Löscht die auf der HomeMatic Zentrale gespeicherten Konfigurationsdaten für ein Gerät}
  ARGUMENTS {_session_id_ interface address}
}

Interface.deleteDevice {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/deletedevice.tcl
  INFO {Löscht ein Gerät}
  ARGUMENTS {_session_id_ interface address flags}
}

Interface.determineParameter {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/determineparameter.tcl
  INFO {Bestimmt den Wert eines Patameters}
  ARGUMENTS {_session_id_ interface address paramsetKey parameterId}
}

Interface.getDeviceDescription {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/getdevicedescription.tcl
  INFO {Liefert die Beschreibung eines Geräts}
  ARGUMENTS {_session_id_ interface address}
}

Interface.getInstallMode {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/getinstallmode.tcl
  INFO {Liefert die Restzeit, für die der Anlernmodus noch aktiv ist}
  ARGUMENTS {_session_id_ interface}
}

Interface.getKeyMissmatchDevice {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/getkeymissmatchdevice.tcl
  INFO {Liefert die Seriennummer des letzten Gerätes, welches nicht angelernt werden konnte}
  ARGUMENTS {_session_id_ interface reset}
}

Interface.getLinkInfo {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/getlinkinfo.tcl
  INFO {Liefert den Namen und die Beschreibung einer direkten Verknüpfung}
  ARGUMENTS {_session_id_ interface senderAddress receiverAddress}
}

Interface.getLinkPeers {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/getlinkpeers.tcl
  INFO {Liefert alle Kommukationspartner eines Geräts}
  ARGUMENTS {_session_id_ interface address}
}

Interface.getLinks {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/getlinks.tcl
  INFO {Liefert für ein Gerät oder einen Kanal alle dirketen Verknüpfungen}
  ARGUMENTS {_session_id_ interface address flags}
}

Interface.getLogLevel {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/getloglevel.tcl
  INFO {Liefert die aktuelle Stufe der Fehlerprotokollierung}
  ARGUMENTS {_session_id_ interface}
}

Interface.getParamset {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/getparamset.tcl
  INFO {Liefert ein komplettes Parameterset}
  ARGUMENTS {_session_id_ interface address paramsetKey}
}

Interface.getParamsetDescription {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/getparamsetdescription.tcl
  INFO {Liefert die Beschreibung eines Parametersets}
  ARGUMENTS {_session_id_ interface address paramsetType}
}

Interface.getParamsetId {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/getparamsetid.tcl
  INFO {Liefert die Id eines Parametersets}
  ARGUMENTS {_session_id_ interface address paramsetType}
}

Interface.getMasterValue {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/getmastervalue.tcl
  INFO {Liefert den Wert eines Parameters aus dem Parameterset "MASTER"}
  ARGUMENTS {_session_id_ interface address valueKey}
}

Interface.getServiceMessageCount {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/getservicemessagecount.tcl
  INFO {Liefert die Anzahl der aktiven Servicemeldungen}
  ARGUMENTS {_session_id_ interface}
}

Interface.getValue {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/getvalue.tcl
  INFO {Liefert den Wert eines Parameters aus dem Parameterset "Values"}
  ARGUMENTS {_session_id_ interface address valueKey}
}

Interface.init {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/init.tcl
  INFO {Meldet eine Logikschicht bei einer Schnittstelle an}
  ARGUMENTS {_session_id_ interface url interfaceId}
}

Interface.isPresent {
  LEVEL NONE
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/ispresent.tcl
  INFO {Prüft, ob der Dienst der betreffenden Schnittstelle läuft)}
  ARGUMENTS {interface}
}

Interface.listDevices {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/listdevices.tcl
  INFO {Liefert eine Liste aller angelernten Geräte}
  ARGUMENTS {_session_id_ interface}
}

Interface.listInterfaces {
  LEVEL GUEST
  SCRIPT_FILE interface/listinterfaces.tcl
  INFO {Liefert eine Liste der verfügbaren Schnittstellen}
  ARGUMENTS {_session_id_}
}

Interface.getLGWStatus {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/getlgwstatus.tcl
  INFO {Liefert den Status des BidCoS Wired Lan Gateways}
  ARGUMENTS {_session_id_ interface}
}

Interface.getLGWConnectionStatus {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/getlgwconnectionstatus.tcl
  INFO {Liefert den Verbindungsstatus des BidCoS Wired Lan Gateways}
  ARGUMENTS {_session_id_ interface serial}
}

Interface.listTeams {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/listteams.tcl
  INFO {Liefert die Gerätebeschreibungen aller Teams}
  ARGUMENTS {_session_id_ interface}
}

Interface.putParamset {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/putparamset.tcl
  INFO {Schreibt ein komplettes Parameterset für ein Gerät}
  ARGUMENTS {_session_id_ interface address paramsetKey set}
}

Interface.putThermParamset {
  LEVEL USER
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/putthermparamset.tcl
  INFO {Schreibt den Partymode für einen Thermostaten}
  ARGUMENTS {_session_id_ interface address set}
}

Interface.refreshDeployedDeviceFirmwareList {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/refreshDeployedDeviceFirmwareList.tcl
  INFO {Aktualisiert die Geraete-Firmware-Liste}
  ARGUMENTS {_session_id_ interface}
}

Interface.removeLink {
  LEVEL ADMIN 
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/removelink.tcl
  INFO {Löscht eine direkte Verknüpfung}
  ARGUMENTS {_session_id_ interface sender receiver}
}

Interface.reportValueUsage {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/reportvalueusage.tcl
  INFO {Teilt der Schnittstelle mit, wie häufig die Logikschicht einen Wert verwendet}
  ARGUMENTS {_session_id_ interface address valueId refCounter}
}

Interface.restoreConfigToDevice {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/restoreconfigtodevice.tcl
  INFO {Überträgt alle Konfigurationsdaten erneut an ein Gerät}
  ARGUMENTS {_session_id_ interface address}
}

Interface.rssiInfo {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/rssiinfo.tcl
  INFO {Liefert die Empfangsfeldstärken der angeschlossenen Geräte}
  ARGUMENTS {_session_id_ interface}
}

Interface.searchDevices {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/searchdevices.tcl
  INFO {Sucht auf dem Bus nach neuen Geräte}
  ARGUMENTS {_session_id_ interface}
}

Interface.setInstallModeHMIP {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/setinstallmodehmip.tcl
  INFO {Aktiviert oder dekativiert den Anlernmodus}
  ARGUMENTS {_session_id_ installMode interface on time address key keymode}
}

Interface.setLinkInfo {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/setlinkinfo.tcl
  INFO {Legt den Namen und die Beschreibung einer direkten Verknüpfung fest}
  ARGUMENTS {_session_id_ interface sender receiver name description}
}

Interface.setLogLevel {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/setloglevel.tcl
  INFO {Legt die Stufe der Fehlerprotokollierung fest}
  ARGUMENTS {_session_id_ interface level}
}

Interface.setTeam {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/setteam.tcl
  INFO {Fügt einem Team einen Kanal hinzu}
  ARGUMENTS {_session_id_ inteface channelAddress teamAddress}
}

Interface.setTempKey {
  LEVEL ADMIN 
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/settempkey.tcl
  INFO {Ändert den temporären AES-Schlüssel}
  ARGUMENTS {_session_id_ interface passphrase}
}

Interface.setValue {
  LEVEL GUEST
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/setvalue.tcl
  INFO {Setzt einen einzelnen Wert im Parameterset "Values"}
  ARGUMENTS {_session_id_ interface address valueKey type value}
}

Interface.updateFirmware {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/updatefirmware.tcl
  INFO {Aktualisiert die Firmware der angegebenen Geräte}
  ARGUMENTS {_session_id_ interface device}
}

Interface.changeDevice {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/changedevice.tcl
  INFO {Tauscht ein Gerät gegen ein anderes aus.}
  ARGUMENTS {_session_id_ interface addressNewDevice addressOldDevice}
}

Interface.listBidcosInterfaces {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/listbidcosinterfaces.tcl
  INFO {Listet die verfügbaren BidCoS-RF Interfaces auf}
  ARGUMENTS {_session_id_ interface}
}

Interface.setBidcosInterface {
  LEVEL ADMIN
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/setbidcosinterface.tcl
  INFO {Ordnet ein Geräte einem BidCoS-RF Interface zu}
  ARGUMENTS {_session_id_ interface deviceId interfaceId roaming}
}

Interface.setMetadata {
  LEVEL NONE
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/setmetadata.tcl
  INFO {Setzt ein Metadatum zu einem Object}
  ARGUMENTS {_session_id_ interface objectId dataId value}
}

Interface.getMetadata {
  LEVEL NONE
  SCRIPT_FILE interface/dispatch.tcl
  METHOD_FILE interface/getmetadata.tcl
  INFO {Gibt ein Metadatum zu einem Object zurück}
  ARGUMENTS {_session_id_ interface objectId dataId value}
}

ReGa.isPresent {
  LEVEL NONE
  SCRIPT_FILE rega/ispresent.tcl
  INFO {Prüft, ob die Logikschicht (ReGa) aktiv ist}
  ARGUMENTS {}
}

ReGa.runScript {
  LEVEL ADMIN
  SCRIPT_FILE rega/runscript.tcl
  INFO {Führt ein HomeMatic Script aus}
  ARGUMENTS {_session_id_ script}
}

Device.getNewDeviceCount {
  LEVEL GUEST
  SCRIPT_FILE device/getnewdevicecount.tcl
  INFO {Liefert die Anzahl aller neuen Geräte}
  ARGUMENTS {_session_id_}
}

Device.listAll {
  LEVEL GUEST
  SCRIPT_FILE device/listall.tcl
  INFO {Liefert die Ids aller fertig konfigurierten Geräte}
  ARGUMENTS {_session_id_}
}
Device.listAllDetail {
  LEVEL GUEST
  SCRIPT_FILE device/listalldetail.tcl
  INFO {Liefert die Detailinformationen aller fertig konfigurierten Geräte}
  ARGUMENTS {_session_id_}
}

Device.get {
  LEVEL GUEST
  SCRIPT_FILE device/get.tcl
  INFO {Liefert Detailinformationen zu einem Gerät}
  ARGUMENTS {_session_id_ id}
}

Device.setName {
  LEVEL ADMIN
  SCRIPT_FILE device/setname.tcl
  INFO {Legt den Namen des Geräts fest}
  ARGUMENTS {_session_id_ id name}
}

Device.getReGaIDByAddress {
  LEVEL ADMIN
  SCRIPT_FILE device/getregaidbyaddress.tcl
  INFO {Ermittelt die ReGa-ID eines Gerätes aufgrund der Seriennummer}
  ARGUMENTS {_session_id_ address}
}

Device.hasLinksOrPrograms {
  LEVEL ADMIN
  SCRIPT_FILE device/haslinksorprograms.tcl
  INFO {Ermittelt, ob das Gerät in direkten Verknüpfungen oder Programmen verwendet wird}
  ARGUMENTS {_session_id_ id}
}


Device.hasPrograms {
  LEVEL ADMIN
  SCRIPT_FILE device/hasprograms.tcl
  INFO {Ermittelt, ob das Gerät Programmen verwendet wird}
  ARGUMENTS {_session_id_ id}
}

Device.listProgramIds {
  LEVEL GUEST
  SCRIPT_FILE device/listprogramids.tcl
  INFO {Liefert die Ids aller Programme, die mindestens einen Kanal des Geräts verwenden}
  ARGUMENTS {_session_id_ id}
}

Device.setOperateGroupOnly {
  LEVEL ADMIN
  SCRIPT_FILE device/setoperategrouponly.tcl
  INFO {Legt die Bedienbarkeit des Geräts fest}
  ARGUMENTS {_session_id_ id mode}
}

Device.startComTest {
  LEVEL GUEST
  SCRIPT_FILE device/startcomtest.tcl
  INFO {Startet den Funktionstest für ein Gerät}
  ARGUMENTS {_session_id_ id}
}

Device.pollComTest {
  LEVEL GUEST
  SCRIPT_FILE device/pollcomtest.tcl
  INFO {Prüft, ob Ergebnisse für einen Funktionstest vorliegen}
  ARGUMENTS {_session_id_ id testId}
}

Device.setVisibility {
  LEVEL ADMIN
  SCRIPT_FILE device/setvisibility.tcl
  INFO {Legt fest, ob das Gerät für normale Anwender sichtbar ist}
  ARGUMENTS {_session_id_ id isVisible}
}

Event.subscribe {
  LEVEL GUEST
  SCRIPT_FILE event/subscribe.tcl
  INFO {Anmeldung für Ereignisbenachrichtigungen}
  ARGUMENTS {_session_id_}
}

Event.unsubscribe {
  LEVEL GUEST
  SCRIPT_FILE event/unsubscribe.tcl
  INFO {Abmeldung für Ereignisbenachrichtigungen}
  ARGUMENTS {_session_id_}
}

Event.poll {
  LEVEL GUEST
  SCRIPT_FILE event/poll.tcl
  INFO {Fragt Ereignisse ab}
  ARGUMENTS {_session_id_}
}

Room.listAll {
  LEVEL GUEST
  SCRIPT_FILE room/listall.tcl
  INFO {Liefert eine Liste aller Räume}
  ARGUMENTS {_session_id_}
}

Room.getAll {
  LEVEL GUEST
  SCRIPT_FILE room/getall.tcl
  INFO {Liefert Detailinformationen zu allen Räumen}
  ARGUMENTS {_session_id_}
}

Room.get {
  LEVEL GUEST
  SCRIPT_FILE room/get.tcl
  INFO {Liefert Detailinfomationen zu einem Raum}
  ARGUMENTS {_session_id_  id}
}

Room.listProgramIds {
  LEVEL GUEST
  SCRIPT_FILE room/listprogramids.tcl
  INFO {Liefert die Ids aller Programme, die mindestens einen Kanal in dem Raum verwenden}
  ARGUMENTS {_session_id_ id}
}

Room.addChannel {
  LEVEL ADMIN
  SCRIPT_FILE room/addchannel.tcl
  INFO {Fügt einen Kanal zu einem Raum hinzu}
  ARGUMENTS {_session_id_ id channelId}
}

Room.removeChannel {
  LEVEL ADMIN
  SCRIPT_FILE room/removechannel.tcl
  INFO {Entfernt einen Kanal aus einem Raum}
  ARGUMENTS {_session_id_ id channelId}
}

Subsection.listAll {
  LEVEL GUEST
  SCRIPT_FILE subsection/listall.tcl
  INFO {Liefert eine Liste aller Gewerke}
  ARGUMENTS {_session_id_}
}

Subsection.getAll {
  LEVEL GUEST
  SCRIPT_FILE subsection/getall.tcl
  INFO {Liefert Detailinformationen zu allen Gewerken}
  ARGUMENTS {_session_id_}
}

Subsection.get {
  LEVEL GUEST
  SCRIPT_FILE subsection/get.tcl
  INFO {Liefert Detailinformationen zu einem Gewerk}
  ARGUMENTS {_session_id_ id}
}

Subsection.listProgramIds {
  LEVEL GUEST
  SCRIPT_FILE subsection/listprogramids.tcl
  INFO {Liefert die Ids aller Programme, die mindesten einen Kanal in dem Raum verwenden}
  ARGUMENTS {_session_id_ id}
}

Subsection.addChannel {
  LEVEL ADMIN
  SCRIPT_FILE subsection/addchannel.tcl
  INFO {Fügt dem Gewerk einen Kanal hinzu}
  ARGUMENTS {_session_id_ id channelId}
}

Subsection.removeChannel {
  LEVEL ADMIN
  SCRIPT_FILE subsection/removechannel.tcl
  INFO {Entfernt einen Kanal aus einem Gewerk}
  ARGUMENTS {_session_id_ id channelId}
}

Channel.listProgramIds {
  LEVEL GUEST
  SCRIPT_FILE channel/listprogramids.tcl
  INFO {Liefert die Ids aller Programme, in denen der Kanal verwendet wird}
  ARGUMENTS {_session_id_ id}
}

Channel.setName {
  LEVEL ADMIN
  SCRIPT_FILE channel/setname.tcl
  INFO {Legt den Namen des Kanals fest}
  ARGUMENTS {_session_id_ id}
}

Channel.getName {
  LEVEL ADMIN
  SCRIPT_FILE channel/getname.tcl
  INFO {Liefert den Namen des Kanals}
  ARGUMENTS {_session_id_ address}
}
Channel.getValue {
  LEVEL ADMIN
  SCRIPT_FILE channel/getvalue.tcl
  INFO {Liefert den Wert des Kanals}
  ARGUMENTS {_session_id_ id}
}
Channel.setUsability {
  LEVEL ADMIN
  SCRIPT_FILE channel/setusability.tcl
  INFO {Legt fest, ob der Kanal für normale Anwender bedienbar}
  ARGUMENTS {_session_id_ id isUsable}
}

Channel.setVisibility {
  LEVEL ADMIN
  SCRIPT_FILE channel/setvisibility.tcl
  INFO {Legt fest, ob der Kanal für normale Anwender sichtbar ist}
  ARGUMENTS {_session_id_ id isVisible}
}

Channel.setLogging {
  LEVEL ADMIN
  SCRIPT_FILE channel/setlogging.tcl
  INFO {Aktiviert bzw. deaktiviert die Protokollierung des Kanals}
  ARGUMENTS {_session_id_ id isLogged}
}

Channel.setMode {
  LEVEL ADMIN
  SCRIPT_FILE channel/setmode.tcl
  INFO {Legt den Übertragungs-Modus (Standard oder Gesichert (AES)) des Kanals fest}
  ARGUMENTS {_session_id_ id}
}

Channel.startComTest {
  LEVEL GUEST
  SCRIPT_FILE channel/startcomtest.tcl
  INFO {Startet den Funktionstest für den Kanal}
  ARGUMENTS {_session_id_ id}
}

Channel.pollComTest {
  LEVEL GUEST
  SCRIPT_FILE channel/pollcomtest.tcl
  INFO {Fragt das Ergebnis eines laufenden Funktionstests ab}
  ARGUMENTS {_session_id_ id testId}
}

Session.login {
  LEVEL NONE
  SCRIPT_FILE session/login.tcl
  INFO {Führt die Benutzeranmeldung durch}
  ARGUMENTS {username password}
}

Session.logout {
  LEVEL NONE
  SCRIPT_FILE session/logout.tcl
  INFO {Beendet eine Sitzung}
  ARGUMENTS {_session_id_}
}

Session.renew {
  LEVEL GUEST
  SCRIPT_FILE session/renew.tcl
  INFO {Erneuert die Sitzung; Falls eine Sitzung nicht rechtzeitig erneuert wird, läuft diese ab}
  ARGUMENTS {_session_id_}
}

Session.setSessionVar {
  LEVEL GUEST
  SCRIPT_FILE session/setsessionvar.tcl
  INFO {Setzt eine Session Variable}
  ARGUMENTS {var val}
}

Program.getAll {
  LEVEL USER
  SCRIPT_FILE program/getall.tcl
  INFO {Liefert Detailinformationen zu allen Programmen auf der HomeMatic Zentrale}
  ARGUMENTS {_session_id_}
}

Program.get {
  LEVEL USER
  SCRIPT_FILE program/get.tcl
  INFO {Liefert Detailinformationen zu einem Programm auf der HomeMatic Zentrale}
  ARGUMENTS {_session_id_ id}
}

Program.execute {
  LEVEL USER
  SCRIPT_FILE program/execute.tcl
  INFO {Führt ein Programm auf der HomeMatic Zentrale aus}
  ARGUMENTS {_session_id_ id}
}

Program.deleteProgramByName {
  LEVEL USER
  SCRIPT_FILE program/deleteprogrambyname.tcl
  INFO {Löscht ein Programm mit bestimmten Namen}
  ARGUMENTS {_session_id_ name}
}

SysVar.getAll {
  LEVEL USER
  SCRIPT_FILE sysvar/getall.tcl
  INFO {Liefert Detailinformationen zu allen Systemvariablen auf der HomeMatic Zentrale}
  ARGUMENTS {_session_id_}
}

SysVar.get {
  LEVEL USER
  SCRIPT_FILE sysvar/get.tcl
  INFO {Liefert Detailinformationen zu einer Systemvariable auf der HomeMatic Zentrale}
  ARGUMENTS {_session_id_ id}
}

SysVar.getValue {
  LEVEL USER
  SCRIPT_FILE sysvar/getvalue.tcl
  INFO {Liefert den aktuellen Wert einer Systemvariable}
  ARGUMENTS {_session_id_ id}
}
SysVar.getValueByName {
  LEVEL USER
  SCRIPT_FILE sysvar/getvaluebyname.tcl
  INFO {Liefert den aktuellen Wert einer Systemvariable}
  ARGUMENTS {_session_id_ name}
}
SysVar.createBool {
  LEVEL USER
  SCRIPT_FILE sysvar/createbool.tcl
  INFO {Erzeugt eine Systemvariable vom Typ bool}
  ARGUMENTS {_session_id_ name init_val internal}
}
SysVar.setBool {
  LEVEL USER
  SCRIPT_FILE sysvar/setbool.tcl
  INFO {Setzt den Wert einer Systemvariable vom Type bool}
  ARGUMENTS {_session_id_ name value}
}
SysVar.createFloat {
  LEVEL USER
  SCRIPT_FILE sysvar/createfloat.tcl
  INFO {Erzeugt eine Systemvariable vom Typ Number}
  ARGUMENTS {_session_id_ name minValue maxValue internal}
}
SysVar.setFloat {
  LEVEL USER
  SCRIPT_FILE sysvar/setfloat.tcl
  INFO {Setzt den Wert einer Systemvariable vom Type float}
  ARGUMENTS {_session_id_ name value}
}
SysVar.deleteSysVarByName {
  LEVEL USER
  SCRIPT_FILE sysvar/deletesysvarbyname.tcl
  INFO {Entfernt eine Systemvariable mit bestimmten Namen}
  ARGUMENTS {_session_id_ name}
}
BidCoS_RF.getConfigurationRF {
  LEVEL ADMIN
  SCRIPT_FILE bidcosrf/getconfiguration-rf.tcl
  INFO {Liefert die aktuelle Konfiguration des BidCoS-RF Dienstes}
  ARGUMENTS {_session_id_}
}

BidCoS_RF.setConfigurationRF {
  LEVEL ADMIN
  SCRIPT_FILE bidcosrf/setconfiguration-rf.tcl
  INFO {Setzt die Konfiguration des BidCoS-RF Dienstes}
  ARGUMENTS {_session_id_ interfaces}
}

BidCoS_RF.createKeyFile {
  LEVEL ADMIN
  SCRIPT_FILE bidcosrf/createkeyfile.tcl
  INFO {Generiert die Datei /etc/config/keys}
  ARGUMENTS {_session_id_ key}
}

BidCoS_RF.isKeySet {
  LEVEL ADMIN
  SCRIPT_FILE bidcosrf/iskeyset.tcl
  INFO {Ermittelt, ob ein Systemsicherheitsschlüssel im ARM7 gesetzt ist}
  ARGUMENTS {_session_id_}
}

BidCoS_RF.validateKey {
  LEVEL ADMIN
  SCRIPT_FILE bidcosrf/validatekey.tcl
  INFO {Prüft, ob der angegebe Schlüssel dem System-Sicherheitsschlüssel entspricht}
  ARGUMENTS {_session_id_ key}
}

Firewall.getConfiguration {
  LEVEL ADMIN
  SCRIPT_FILE firewall/getconfiguration.tcl
  INFO {Liefert die aktuelle Konfiguration der Firewall}
  ARGUMENTS {_session_id_}
}

Firewall.setConfiguration {
  LEVEL ADMIN
  SCRIPT_FILE firewall/setconfiguration.tcl
  INFO {Setzt die Konfiguration der Firewall}
  ARGUMENTS {_session_id_ services ips}
}

WebUI.getColors {
  LEVEL NONE
  SCRIPT_FILE webui/getcolors.tcl
  INFO {Liefert die Systemfarben der HomeMatic WebUI}
  ARGUMENTS { }
}

SafeMode.enter {
  LEVEL ADMIN
  SCRIPT_FILE safemode/enter.tcl
  INFO {Startet die HomeMatic Zentrale im angesicherten Modus}
  ARGUMENTS {_session_id_}
}

CCU.getSerial {
  LEVEL ADMIN
  SCRIPT_FILE ccu/getserial.tcl
  INFO {Liefert die Seriennummer der HomeMatic Zentrale}
  ARGUMENTS {_session_id_}
}
CCU.getVersion {
  LEVEL ADMIN
  SCRIPT_FILE ccu/getversion.tcl
  INFO {Liefert die Firmware-Version der HomeMatic Zentrale}
  ARGUMENTS {_session_id_}
}
CCU.setSSH {
  LEVEL ADMIN
  SCRIPT_FILE ccu/setssh.tcl
  INFO {Aktiviert oder. deaktiviert den SSH-Zugang der HomeMatic Zentrale}
  ARGUMENTS {_session_id_ mode}
}
CCU.getSSHState {
  LEVEL ADMIN
  SCRIPT_FILE ccu/getsshstate.tcl
  INFO {Liefert den Zustand des SSH-Zugangs der HomeMatic Zentrale (aktiviert oder deaktiviert)}
  ARGUMENTS {_session_id_}
}
CCU.setSSHPassword {
  LEVEL ADMIN
  SCRIPT_FILE ccu/setsshpassword.tcl
  INFO {Setzt das Passwort für den SSH-Zugang}
  ARGUMENTS {_session_id_ passwd}
}
CCU.restartSSHDaemon {
  LEVEL ADMIN
  SCRIPT_FILE ccu/restartsshdaemon.tcl
  INFO {Restartet den SSH-Daemon}
  ARGUMENTS {_session_id_}
}
CCU.hideStickyUnreach {
  LEVEL ADMIN
  SCRIPT_FILE ccu/setstickyunreach.tcl
  INFO {Aktiviert oder. deaktiviert die Sichtbarkeit der STICKY-UNREACH Servicemeldungen}
  ARGUMENTS {_session_id_ mode}
}
CCU.getStickyUnreachState {
  LEVEL ADMIN
  SCRIPT_FILE ccu/getstickyunreachstate.tcl
  INFO {Prüft, ob die Datei /etc/config/hideStickyUnreach vorhanden ist}
  ARGUMENTS {_session_id_}
}

CCU.existsFile {
  LEVEL ADMIN
  SCRIPT_FILE ccu/existsfile.tcl
  INFO {Prüft, ob eine Datei oder ein Verzeichniss vorhanden ist}
  ARGUMENTS {_session_id_ file}
}

BidCoS_Wired.getConfigurationWired {
  LEVEL ADMIN
  SCRIPT_FILE bidcoswired/getconfiguration-wired.tcl
  INFO {Liefert die aktuelle Konfiguration des BidCoS-Wired Dienstes}
  ARGUMENTS {_session_id_}
}

BidCoS_Wired.setConfigurationWired {
  LEVEL ADMIN
  SCRIPT_FILE bidcoswired/setconfiguration-wired.tcl
  INFO {Setzt die Konfiguration des BidCoS-Wired Dienstes}
  ARGUMENTS {_session_id_ interfaces}
}
BidCoS.changeLanGatewayKey {
  LEVEL ADMIN
  SCRIPT_FILE bidcos/changeLanGatewayKey.tcl
  INFO {Bereitet das Setzen eines LAN Gateway Schlüssels vor.}
  ARGUMENTS {_session_id_ lgwclass lgwserial lgwip newkey curkey}
}
User.getUserName {
        LEVEL NONE
        SCRIPT_FILE user/getusername.tcl
        INFO {Gibt den Username zurück}
        ARGUMENTS {_session_id_ userID}
}
User.isNoExpert {
        LEVEL NONE
        SCRIPT_FILE user/isnoexpert.tcl
        INFO {Ermittelt, ob ein Benutzer Experte ist}
        ARGUMENTS {_session_id_ id}
}
User.getLanguage {
        LEVEL NONE 
        SCRIPT_FILE user/getlanguage.tcl
        INFO {Ermittelt die gewählte Sprache des Benutzers}
        ARGUMENTS {userName}
}
User.setLanguage {
        LEVEL NONE 
        SCRIPT_FILE user/setlanguage.tcl
        INFO {Setzt die gewählte Sprache des Benutzers}
        ARGUMENTS {userName userLang}
}

User.getReGaVersion {
        LEVEL NONE
        SCRIPT_FILE user/getregaversion.tcl
        INFO {Ermittelt die gewählte ReGaVersion}
        ARGUMENTS {}
}

User.setReGaVersion {
        LEVEL NONE
        SCRIPT_FILE user/setregaversion.tcl
        INFO {Speichert die gewählte ReGaVersion}
        ARGUMENTS {ReGaVersion}
}

User.existsCertificate {
        LEVEL ADMIN
        SCRIPT_FILE user/existscertificate.tcl
        INFO {Prüft, ob ein Zertifikat zur Verwendung von https vorhanden ist}
        ARGUMENTS {_session_id_}
}

User.deleteCertificate {
        LEVEL ADMIN
        SCRIPT_FILE user/deletecertificate.tcl
        INFO {Löscht ein vorhandenes Zertifikat (server.pem) unter /etc/config}
        ARGUMENTS {_session_id_}
}

User.restartLighttpd {
        LEVEL ADMIN
        SCRIPT_FILE user/restartlighttpd.tcl
        INFO {Restartet den lighttpd Webserver}
        ARGUMENTS {_session_id_}
}

Diagram.getDiagrams {
        LEVEL NONE
        SCRIPT_FILE diagram/getDiagrams.tcl
        INFO {Ermittelt die zur Verfügung stehenden Messwert-Diagramme}
        ARGUMENTS {}
}
Diagram.getDataSourceGroups {
        LEVEL NONE
        SCRIPT_FILE diagram/getDataSourceGroups.tcl
        INFO {Ermittelt alle bekannten Gruppen von Datenquellen}
        ARGUMENTS {}
}